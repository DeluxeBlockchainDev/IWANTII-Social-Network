{"version":3,"sources":["components/SubscribeDialog.js","components/CountdownList.js","components/Requests.js","components/LiveUsers.js","components/UserList.js","components/Winner.js","components/CommentItem.js","components/CommentCountdown.js","components/SelectDialog.js","components/CommentRequest.js","components/CommentUser.js","components/CommentsBox.js","components/Comments.js","store/action/statusAction.js","components/Sharethis.js","pages/Countdown/CountdownWidget.js","pages/Countdown/MessageBox.js","api/socket.js","pages/Countdown/index.js"],"names":["FormDialog","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","open","setOpen","_React$useState3","name","email","_React$useState4","user","setUser","_React$useState5","_React$useState6","captchaCode","setCaptchaCode","visible","onClose","onSubmit","handleClose","useEffect","getUser","react_default","a","createElement","Dialog","aria-labelledby","event","_user","regenerator_default","async","_context","prev","next","preventDefault","target","captcha","value","storeUser","JSON","stringify","notify","success","data","stop","DialogTitle","id","DialogContent","DialogContentText","TextField","margin","label","type","fullWidth","required","autoComplete","defaultValue","index_es","code","width","height","fontSize","charsCount","chars","containerClassName","captchaClassName","backgroundColor","fontColor","retry","autoFocus","DialogActions","Button","onClick","className","color","CountdownList","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dialogVisible","likeType","LIKE","current","likeCountdown","bind","assertThisInitialized","getUserId","userId","httpRequest","concat","COUNTDOWNS","_id","res","onUpdated","_this2","_this$props","countdowns","title","map","index","key","history","push","react_router_dom_min","to","e","setState","likes","DISLIKE","dislikes","comments","Component","Requests","reqeusts","likeRequest","previousProps","requests","REQUESTS","_this$state","getCountryName","country","toLocaleLowerCase","text","react_router_dom","countdown","LiveUsers","page","pageSize","isDone","showRequest","currentUser","toogleRequestVisible","handlePageChange","likeUser","USERS","simpleMode","slice","onNewComment","react","sameRequest","sameLinks","Pagination","count","Math","ceil","length","onChange","showFirstButton","showLastButton","UserList","goCountdown","PARAM_USER","reqRes","countdownId","users","Winner","request","show","targetType","likeWinner","prevProps","objectSpread","Number","Fragment","onNewUserComment","UncontrolledPopover","trigger","placement","PopoverHeader","PopoverBody","dist","config","alignment","enabled","font_size","language","networks","padding","radius","show_total","size","url","window","location","href","image","description","message","subject","username","onNewRequestComment","prevState","variant","style","startIcon","Share_default","Item","currentId","category","comment","showReply","likeDialogVisible","saveComment","parentId","onSave","self","require","spamCheck","string","err","results","spam","NotificationManager","error","alt","src","replaceAll","placeholder","es_Button","disabled","reply","onLike","winner","CountdownComments","clickedNewComment","newComment","likeComment","COMMENTS","Card","CardBody","Row","Col","md","sm","CommentItem_Item","options","setOptions","checked","setChecked","_React$useState7","_React$useState8","setLabel","selected","Autocomplete","find","item","getOptionLabel","option","val","renderInput","params","assign","RequestComments","commentId","selectDialogVisible","requestId","SelectDialog_FormDialog","UserComments","winnerId","CommentsBox","countdownComments","userComments","requestComments","disqusShow","facebookShow","currentCountdownId","winnerRequest","CommentCountdown","CommentUser","CommentRequest","CommentsWidget","listTitle","commentType","handleSubmit","display","alignItems","cursor","marginRight","react_facebook_lib","FACEBOOK_APP_URL","marginLeft","position","disqus_react_lib","shortname","DISQUS_SHORT_NAME","process","identifier","DISQUS_IDENTIFIER","DISQUS_TITLE","DISQUS_LANGUAGE","components_CommentsBox","setPendingStatus","payload","PENDING_TEXT","Sharethis","renderer","_ref","hours","minutes","seconds","completed","zeroPad","CountdownWidget","currentTime","isPending","pendingText","getPendingText","pending","SETTINGS","CONFIG","configRes","minUsers","dist_index_es","date","controlled","Sharethis_Sharethis","SOCKET","io","SOCKET_SERVER_URL","MessageBox","sendRequest","ipResponse","ip","countdownRes","awrap","sent","getIP","query","CURRENT","liveCountdown","showAlert","requestLength","bans","fetchConfig","connectSocket","on","time","_countdownId","_countdownRes","_context2","moment","duration","split","showCaptcha","forEach","element","indexOf","_this3","rows","getRequestText","max","Reply_default","Alert","security","withRouter","CountdownPanel","origin","selectedId","worstRequests","topRequests","topUsers","topCountdowns","inProgress","pendingStatus","commentboxRef","createRef","countdownRef","saveComments","fetchCurrentCountdown","fetchLiveUsers","fetchTopCountdowns","fetchTopUsers","fetchComments","refreshTopRequests","refreshWorstRequests","newReqeustComment","newUserComment","newCountdownComment","updateWinnerComments","updateCountdownComments","isSimpleMode","setUserIPAndCountry","setSEO","fetchReqeusts","PARAM_WORST","PARAM_TOP","match","listen","action","pathArray","pathname","_context3","scrollIntoView","behavior","SEO","document","getElementsByTagName","innerHTML","getElementsByName","content","keywords","PARAM_COUNT","setConfiguration","winnerRes","winnerRequestRes","resArray","i","getTotalCommentsCount","PARAM_COUNTDOWN","requestRes","reqeustArray","userRes","fetchUserComments","fetchCountdownComments","fetchRequestComments","toString","block","commentsRes","param","worstRes","commentRes","rec","threads","sort","b","commentsItem","j","sortComments","requestUserRes","Header","components_CountdownList","components_Requests","components_UserList","lg","xs","Countdown_MessageBox","ref","CountdownWidget_CountdownWidget","Winner_Winner","Comments","components_LiveUsers","connect","getIn","dispatch","bindActionCreators","setPendingStatusAction","setSimpleMode","setSimpleModeAction"],"mappings":"kYAYe,SAASA,EAAWC,GAAO,IAAAC,EAChBC,IAAMC,UAAS,GADCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACjCM,EADiCH,EAAA,GAC3BI,EAD2BJ,EAAA,GAAAK,EAEhBP,IAAMC,SAAS,CACrCO,KAAM,GACNC,MAAO,KAJ+BC,EAAAP,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEjCI,EAFiCD,EAAA,GAE3BE,EAF2BF,EAAA,GAAAG,EAMFb,IAAMC,SAAS,IANba,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAMjCE,EANiCD,EAAA,GAMpBE,EANoBF,EAAA,GAOhCG,EAA+BnB,EAA/BmB,QAASC,EAAsBpB,EAAtBoB,QAASC,EAAarB,EAAbqB,SAEpBC,EAAc,WAClBd,GAAQ,GACRY,KAGFlB,IAAMqB,UAAU,WACdf,EAAQW,GACRL,EAAQU,gBACP,CAACL,IAsBJ,OACEM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACErB,KAAMA,EACNa,QAASE,EACTO,kBAAgB,qBAEhBJ,EAAAC,EAAAC,cAAA,QAAMN,SA3BG,SAAMS,GAAN,IAAAC,EAAA,OAAAC,EAAAN,EAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACbN,EAAMO,iBAEFpB,IAAgBa,EAAMQ,OAAOC,QAAQC,OACnC3B,EAAO,CACTH,KAAMoB,EAAMQ,OAAO5B,KAAK8B,MACxB7B,MAAOmB,EAAMQ,OAAO3B,MAAM6B,OAE5BC,YAAUC,KAAKC,UAAU9B,IACzBC,EAAQU,eACRH,IACAC,KAEAsB,YAAO,CACLC,SAAS,EACTC,KAAM,wBAfG,wBAAAZ,EAAAa,YA4BPtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAaC,GAAG,qBAAhB,sBACAxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,kGAIA1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEC,OAAO,SACP3C,KAAK,OACL4C,MAAM,YACNC,KAAK,OACLC,WAAS,EACTC,UAAQ,EACRC,aAAa,MACbC,aAAc9C,EAAKH,OAErBe,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEC,OAAO,QACP3C,KAAK,QACL4C,MAAM,gBACNC,KAAK,QACLG,aAAa,MACbF,WAAS,EACTC,UAAQ,EACRE,aAAc9C,EAAKF,QAErBc,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CACE3C,YAAa,SAAA4C,GAAI,OAAI3C,EAAe2C,IACpCC,MAAO,IACPC,OAAQ,GACRC,SAAU,GACVC,WAAY,EACZC,MAAM,2DACNC,mBAAmB,oBACnBC,iBAAiB,UACjBC,gBAAgB,cAChBC,UAAU,UACVC,OAAO,IAET9C,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEoB,WAAS,EACTnB,OAAO,QACP3C,KAAK,UACL4C,MAAM,eACNC,KAAK,OACLC,WAAS,EACTE,aAAa,MACbD,UAAQ,KAGZhC,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACEhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACEC,QAASrD,EACTsD,UAAU,kBACVC,MAAM,WAHR,UAOApD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAQnB,KAAK,SAASqB,UAAU,mBAAhC,0BCTGE,cApGb,SAAAA,IAAc,IAAAC,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAH,IACZC,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAyE,GAAAM,KAAAH,QACKI,MAAQ,CACXC,eAAe,EACfC,SAAUC,IACVC,QAAS,IAGXV,EAAKW,cAAgBX,EAAKW,cAAcC,KAAnBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IARTA,kLAaOc,6BAAfC,4BACYC,YAAW,GAAAC,OACtBC,IADsB,KAAAD,OACRf,KAAKI,MAAMI,QAAQS,KADXF,OACiBf,KAAKI,MAAME,UACrD,MACA,CAAE1E,KAAMiF,aAHNK,UAKItD,SACNoC,KAAKjF,MAAMoG,YAEbxD,YAAOuD,kFAGA,IAAAE,EAAApB,KACCK,EAAkBL,KAAKI,MAAvBC,cADDgB,EAEuBrB,KAAKjF,MAA3BuG,EAFDD,EAECC,WAAYC,EAFbF,EAEaE,MACpB,OACE/E,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,0CACbnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,2CACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,wCAAwC4B,IAEvDD,EAAWE,IAAI,SAACjE,EAAOkE,GAAR,OACdjF,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,OAAO+B,IAAKD,GACzBjF,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,8CACbnD,EAAAC,EAAAC,cAAA,MACEiD,UAAU,+CACVD,QAAS,WACPiC,IAAQC,KAAR,cAAAb,OAA2BxD,EAAM0D,QAGlC1D,EAAM9B,KAAM,MAGjBe,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,sEACbnD,EAAAC,EAAAC,cAACmF,EAAA,KAAD,CACEC,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAUC,IACVF,eAAe,EACfG,QAASjD,KAGboC,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gFAZf,SAaSpC,EAAM0E,OAEfzF,EAAAC,EAAAC,cAACmF,EAAA,KAAD,CACEC,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAU4B,IACV7B,eAAe,EACfG,QAASjD,KAGboC,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8EAZf,YAaYpC,EAAM4E,UAElB3F,EAAAC,EAAAC,cAACmF,EAAA,KAAD,CACEC,GAAE,cAAAf,OAAgBxD,EAAM0D,KACxBtB,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,wEAJf,YAKYpC,EAAM6E,cAKxB5F,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAKS,wBA9FG4B,+BCqHbC,cApHb,SAAAA,IAAc,IAAAxC,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAsC,IACZxC,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAkH,GAAAnC,KAAAH,QACKI,MAAQ,CACXmC,SAAU,GACVhB,MAAO,GACPlB,eAAe,EACfC,SAAUC,IACVC,QAAS,IAGXV,EAAK0C,YAAc1C,EAAK0C,YAAY9B,KAAjBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAVPA,kFAaK2C,GACbA,IAAkBzC,KAAKjF,OACzBiF,KAAKgC,SAAS,CACZO,SAAUvC,KAAKjF,MAAM2H,SACrBnB,MAAOvB,KAAKjF,MAAMwG,iJAOHX,6BAAfC,4BACYC,YAAW,GAAAC,OACtB4B,IADsB,KAAA5B,OACVf,KAAKI,MAAMI,QAAQS,KADTF,OACef,KAAKI,MAAME,UACnD,MACA,CAAE1E,KAAMiF,aAHNK,UAKItD,SACNoC,KAAKjF,MAAMoG,YAEbxD,YAAOuD,kFAGA,IAAAE,EAAApB,KAAA4C,EACoC5C,KAAKI,MAAxCmC,EADDK,EACCL,SAAUhB,EADXqB,EACWrB,MAAOlB,EADlBuC,EACkBvC,cACzB,OACE7D,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,0CACbnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,2CACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,wCAAwC4B,IAEvDgB,EAASf,IAAI,SAACjE,EAAOkE,GAAR,OACZjF,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,OAAO+B,IAAKD,GACzBjF,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,8CACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,wCACXpC,EAAM3B,KAAKH,KAAM,IAClBe,EAAAC,EAAAC,cAAA,QAAMiD,UAAU,qDACbkD,YAAetF,EAAM3B,KAAKkH,SAC3BtG,EAAAC,EAAAC,cAAA,KACEiD,UAAS,uBAAAoB,OAAyBxD,EAAM3B,KAAKkH,QAAQC,0BAK7DvG,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,8CACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,uDAAd,KACKpC,EAAMyF,KADX,OAIFxG,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,sEACbnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAUC,IACVF,eAAe,EACfG,QAASjD,KAGboC,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gFAZf,SAaSpC,EAAM0E,OAEfzF,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAU4B,IACV7B,eAAe,EACfG,QAASjD,KAGboC,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8EAZf,YAaYpC,EAAM4E,UAElB3F,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAE,cAAAf,OAAgBxD,EAAM2F,WACxBvD,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,wEAJf,YAKYpC,EAAM6E,cAKxB5F,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAKwC,sBA9GFH,sBCsNRc,cApNb,SAAAA,IAAc,IAAArD,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAmD,IACZrD,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAA+H,GAAAhD,KAAAH,QACKI,MAAQ,CACXmC,SAAU,GACVhB,MAAO,GACP6B,KAAM,EACNC,SAAU,EACVC,QAAQ,EACRC,aAAa,EACblD,eAAe,EACfC,SAAUC,IACViD,YAAa,IAGf1D,EAAK2D,qBAAuB3D,EAAK2D,qBAAqB/C,KAA1BtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAC5BA,EAAK4D,iBAAmB5D,EAAK4D,iBAAiBhD,KAAtBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACxBA,EAAK6D,SAAW7D,EAAK6D,SAASjD,KAAdtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAhBJA,kFAmBK2C,GACbA,IAAkBzC,KAAKjF,OACzBiF,KAAKgC,SAAS,CACZO,SAAUvC,KAAKjF,MAAM2H,SACrBnB,MAAOvB,KAAKjF,MAAMwG,uDAMtBvB,KAAKgC,SAAS,CACZuB,aAAcvD,KAAKI,MAAMmD,uDAIZ1G,EAAOU,GACtByC,KAAKgC,SAAS,CACZoB,KAAM7F,0IAMWqD,6BAAfC,4BACYC,YAAW,GAAAC,OACtB6C,IADsB,KAAA7C,OACbf,KAAKI,MAAMoD,YAAYvC,KADVF,OACgBf,KAAKI,MAAME,UACpD,MACA,CAAE1E,KAAMiF,aAHNK,UAKItD,SACNoC,KAAKjF,MAAMoG,YAEbxD,YAAOuD,kFAGA,IAAAE,EAAApB,KAAA4C,EAQH5C,KAAKI,MANPmC,EAFKK,EAELL,SACAhB,EAHKqB,EAGLrB,MACAgC,EAJKX,EAILW,YACAH,EALKR,EAKLQ,KACAC,EANKT,EAMLS,SACAhD,EAPKuC,EAOLvC,cAEMwD,EAAe7D,KAAKjF,MAApB8I,WACR,OACErH,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,0CACbnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,2CACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,wCAAwC4B,GACtD/E,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,yCACVD,QAASM,KAAKyD,sBAEbF,EAAc,eAAiB,iBAGnChB,EACEuB,OAAOV,EAAO,GAAKC,EAAUD,EAAOC,GACpC7B,IAAI,SAACjE,EAAOkE,GAAR,OACHjF,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,OAAO+B,IAAKD,GACzBjF,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,8CACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,wCACXpC,EAAM3B,KAAKH,KAAM,IAClBe,EAAAC,EAAAC,cAAA,QAAMiD,UAAU,qDACbkD,YAAetF,EAAM3B,KAAKkH,SAC3BtG,EAAAC,EAAAC,cAAA,KACEiD,UAAS,uBAAAoB,OAAyBxD,EAAM3B,KAAKkH,QAAQC,0BAK7DvG,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,8CACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,uDACX4D,EAAW,KAAAxC,OAAQxD,EAAMyF,KAAd,MAAyB,KAGzCxG,EAAAC,EAAAC,cAAA,OACEiD,UACEkE,EACI,iEACA,kEAGNrH,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,4FACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAUC,IACVF,eAAe,EACfmD,YAAajG,EAAM3B,SAIvBY,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gFAZf,SAaSpC,EAAM3B,KAAKqG,OAEpBzF,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,4FACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAU4B,IACV7B,eAAe,EACfmD,YAAajG,EAAM3B,SAIvBY,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8EAZf,YAaYpC,EAAM3B,KAAKuG,UAEvB3F,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,oGACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKrG,MAAMgJ,aAAaxG,EAAM3B,KAAKqF,OAGrCzE,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,wEARf,YASYpC,EAAM3B,KAAKwG,UAEtByB,EACCrH,EAAAC,EAAAC,cAACsH,EAAA,SAAD,KACExH,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,6FAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8DAJf,iBAKiBpC,EAAM3B,KAAKqI,aAE5BzH,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8DAJf,cAKcpC,EAAM3B,KAAKsI,YAI3B,IAGHL,EACC,GAEArH,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,4DACbnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,6FAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8DAJf,iBAKiBpC,EAAM3B,KAAKqI,aAE5BzH,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8DAJf,cAKcpC,EAAM3B,KAAKsI,eAOnC1H,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,wBACbnD,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CACEC,MAAOC,KAAKC,KAAK/B,EAASgC,OAASlB,GACnCD,KAAMA,EACNxD,MAAM,YACN4E,SAAUxE,KAAK0D,iBACfe,iBAAe,EACfC,gBAAc,KAGlBlI,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAK2D,mBA9MDtB,aC4HTsC,cA3Hb,SAAAA,IAAc,IAAA7E,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAA2E,IACZ7E,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAuJ,GAAAxE,KAAAH,QACKI,MAAQ,CACXC,eAAe,EACfC,SAAUC,IACViD,YAAa,IAGf1D,EAAK6D,SAAW7D,EAAK6D,SAASjD,KAAdtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAChBA,EAAK8E,YAAc9E,EAAK8E,YAAYlE,KAAjBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IATPA,6KAiBOc,6BAAfC,4BACYC,YAAW,GAAAC,OACtB6C,IADsB,KAAA7C,OACbf,KAAKI,MAAMoD,YAAYvC,KADVF,OACgBf,KAAKI,MAAME,UACpD,MACA,CAAE1E,KAAMiF,aAHNK,UAKItD,SACNoC,KAAKjF,MAAMoG,YAEbxD,YAAOuD,qFAMSL,sGACGC,YAAW,GAAAC,OACzB4B,IADyB,KAAA5B,OACb8D,IADa,KAAA9D,OACCF,GAC7B,gBAFEiE,UAIOlH,SAAWkH,EAAOjH,KAAK0G,OAAS,IACrCQ,EAAcD,EAAOjH,KAAK,GAAGqF,UACjCvB,IAAQC,KAAR,cAAAb,OAA2BgE,0EAItB,IAAA3D,EAAApB,KAAAqB,EACkBrB,KAAKjF,MAAtBiK,EADD3D,EACC2D,MAAOzD,EADRF,EACQE,MACPlB,EAAkBL,KAAKI,MAAvBC,cACR,OACE7D,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,0CACbnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,2CACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,wCAAwC4B,IAEvDyD,EAAMxD,IAAI,SAACjE,EAAOkE,GAAR,OACTjF,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,OAAO+B,IAAKD,GACzBjF,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,8CACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,wCACXpC,EAAM9B,KAAM,IACbe,EAAAC,EAAAC,cAAA,KACEiD,UAAS,uBAAAoB,OAAyBxD,EAAMuF,QAAQC,uBAElDvG,EAAAC,EAAAC,cAAA,QAAMiD,UAAU,qDACbkD,YAAetF,EAAMuF,YAI5BtG,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,sEACbnD,EAAAC,EAAAC,cAACmF,EAAA,KAAD,CACEC,GAAG,IACHnC,UAAU,oGACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAUC,IACVF,eAAe,EACfmD,YAAajG,MAIjBf,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gFAZf,SAaSpC,EAAM0E,OAEfzF,EAAAC,EAAAC,cAACmF,EAAA,KAAD,CACEC,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAU4B,IACV7B,eAAe,EACfmD,YAAajG,KAGjBoC,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8EAZf,YAaYpC,EAAM4E,UAElB3F,EAAAC,EAAAC,cAACmF,EAAA,KAAD,CACEC,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKwD,YAAYrH,EAAM0D,MAEzBtB,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,wEARf,YASYpC,EAAM6E,cAKxB5F,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAK2D,mBArHFtB,mECGF4C,cACnB,SAAAA,IAAc,IAAAnF,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAiF,IACZnF,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAA6J,GAAA9E,KAAAH,QACKI,MAAQ,CACXxE,KAAM,CACJH,KAAM,IAERyJ,QAAS,CACPlC,KAAM,IAERM,QAAQ,EACR6B,MAAM,EACN9E,eAAe,EACfC,SAAUC,IACV6E,WAAY,GAGdtF,EAAKuF,WAAavF,EAAKuF,WAAW3E,KAAhBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAhBNA,kFAmBKwF,GACbA,IAActF,KAAKjF,OAASiF,KAAKjF,MAAMa,MAAQoE,KAAKjF,MAAMmK,SAC5DlF,KAAKgC,SAAS,CACZsB,OAAQtD,KAAKjF,MAAMuI,OACnB4B,QAASlF,KAAKjF,MAAMmK,QACpBtJ,KAAMoE,KAAKjF,MAAMa,+IAUFgF,yBAAfC,SACAK,EAAM,GAEoB,IAA1BlB,KAAKI,MAAMgF,sDACDtE,YAAW,GAAAC,OAClB6C,IADkB,KAAA7C,OACTf,KAAKI,MAAMxE,KAAKqF,KADPF,OACaf,KAAKI,MAAME,UAC7C,MACA,CAAE1E,KAAMiF,aAHVK,UAMQtD,UACFoC,KAAKI,MAAME,WAAaC,IAC1BP,KAAKgC,SAAS,CACZpG,KAAKR,OAAAmK,EAAA,EAAAnK,CAAA,GACA4E,KAAKI,MAAMxE,KADZ,CAEFqG,MAAOuD,OAAOxF,KAAKI,MAAMxE,KAAKqG,OAAS,MAI3CjC,KAAKgC,SAAS,CACZpG,KAAKR,OAAAmK,EAAA,EAAAnK,CAAA,GACA4E,KAAKI,MAAMxE,KADZ,CAEFuG,SAAUqD,OAAOxF,KAAKI,MAAMxE,KAAKuG,UAAY,0DAQzCrB,YAAW,GAAAC,OAClB4B,IADkB,KAAA5B,OACNf,KAAKI,MAAM8E,QAAQjE,KADbF,OACmBf,KAAKI,MAAME,UACnD,MACA,CAAE1E,KAAMiF,cAHVK,UAMQtD,UACFoC,KAAKI,MAAME,WAAaC,IAC1BP,KAAKgC,SAAS,CACZkD,QAAQ9J,OAAAmK,EAAA,EAAAnK,CAAA,GACH4E,KAAKI,MAAM8E,QADT,CAELjD,MAAOuD,OAAOxF,KAAKI,MAAM8E,QAAQjD,OAAS,MAI9CjC,KAAKgC,SAAS,CACZkD,QAAQ9J,OAAAmK,EAAA,EAAAnK,CAAA,GACH4E,KAAKI,MAAM8E,QADT,CAEL/C,SAAUqD,OAAOxF,KAAKI,MAAM8E,QAAQ/C,UAAY,eAO1DxE,YAAOuD,mFAGA,IAAAE,EAAApB,KAAA4C,EACgD5C,KAAKI,MAApDkD,EADDV,EACCU,OAAQ1H,EADTgH,EACShH,KAAMsJ,EADftC,EACesC,QAAS7E,EADxBuC,EACwBvC,cAAe8E,EADvCvC,EACuCuC,KAC9C,OACE3I,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACEjJ,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,2BACK,qBAAT/D,EAAuB,GAAKA,EAAKH,KACxCG,EAAKkH,QACJtG,EAAAC,EAAAC,cAAA,QAAMiD,UAAU,qDACbkD,YAAejH,EAAKkH,SACrBtG,EAAAC,EAAAC,cAAA,KACEiD,UAAS,uBAAAoB,OAAyBnF,EAAKkH,QAAQC,wBAInD,IAKHO,EACC9G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,2BACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,2BACZnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAUC,IACV6E,WAAY,EACZ/E,eAAe,KAGnBV,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gFAZf,eAae/D,EAAKqG,QAGtBzF,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAU4B,IACVkD,WAAY,EACZ/E,eAAe,KAGnBV,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8EAZf,kBAakB/D,EAAKuG,WAGzB3F,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,8BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKrG,MAAM2K,iBAAiB9J,EAAKqF,MAEnCtB,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,wEARf,kBASkB/D,EAAKwG,aAK7B5F,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,2BACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,2BACZnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GAAC,OAAIA,EAAE3E,kBAChBY,GAAG,cACH2B,UAAU,6FAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8DANf,iBAOiB/D,EAAKqI,aAEtBzH,EAAAC,EAAAC,cAACiJ,EAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,SACVxI,OAAO,eAEPb,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,gBACAtJ,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,6CAAAhF,OAEInF,EAAKqI,YAFT,iBAOJzH,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GAAC,OAAIA,EAAE3E,kBAChBY,GAAG,WACH2B,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8DANf,cAOc/D,EAAKsI,WAEnB1H,EAAAC,EAAAC,cAACiJ,EAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,SACVxI,OAAO,YAEPb,EAAAC,EAAAC,cAACoJ,EAAA,EAAD,aACAtJ,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,0CAAAhF,OAEInF,EAAKsI,UAFT,oBAWV,GAGF1H,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,oCACV,KACmB,qBAAZuF,EAA0B,GAAKA,EAAQlC,KAC9C,MAGFmC,GACC3I,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,aACbnD,EAAAC,EAAAC,cAACsJ,EAAA,mBAAD,CACEC,OAAQ,CACNC,UAAW,SACXtG,MAAO,SACPuG,SAAS,EACTC,UAAW,GACXC,SAAU,KACVC,SAAU,CAER,WACA,WACA,YACA,WACA,WAEFC,QAAS,GACTC,OAAQ,GACRC,YAAY,EACZC,KAAM,GAGNC,IAAKC,OAAOC,SAASC,KACrBC,MAAO,yBACPC,YAAa,UACbzF,MAAO,UACP0F,QAAS,UACTC,QAAS,UACTC,SAAU,cAOjB7D,EACC9G,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,2BACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,2BACZnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAUC,IACV6E,WAAY,EACZ/E,eAAe,KAGnBV,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gFAZf,gBAagBuF,EAAQjD,QAG1BzF,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAU4B,IACVkD,WAAY,EACZ/E,eAAe,KAGnBV,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8EAZf,mBAamBuF,EAAQ/C,WAG7B3F,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,8BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKrG,MAAMqM,oBAAoBlC,EAAQjE,MAEzCtB,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,wEARf,mBASmBuF,EAAQ9C,aAMjC,GAIF5F,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACEC,QAAS,kBACP0B,EAAKY,SAAS,SAAAqF,GAAS,OAAAjM,OAAAmK,EAAA,EAAAnK,CAAA,GAClBiM,EADkB,CAErBlC,MAAOkC,EAAUlC,UAGrBmC,QAAQ,YACRC,MAAO,CAAEnI,gBAAiB,UAAWQ,MAAO,QAC5C4H,UAAWhL,EAAAC,EAAAC,cAAC+K,EAAAhL,EAAD,OATb,SAcAD,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAKqF,qBApVWhD,gFCFfqF,eACnB,SAAAA,IAAc,IAAA5H,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAA0H,IACZ5H,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAsM,GAAAvH,KAAAH,QACKI,MAAQ,CACXuH,UAAW,GACXC,SAAUhE,IACViE,QAAS,CACP7E,KAAM,UACNpH,KAAM,CACJH,KAAM,GACNqH,QAAS,OAGbE,KAAM,GACN1C,SAAUC,IACVuH,WAAW,EACXzH,eAAe,EACf0H,mBAAmB,GAGrBjI,EAAKkI,YAAclI,EAAKkI,YAAYtH,KAAjBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAnBPA,kFAsBKwF,GACbA,IAActF,KAAKjF,OACrBiF,KAAKgC,SAAS,CACZ6F,QAAS7H,KAAKjF,MAAMqH,SACpBwF,SAAU5H,KAAKjF,MAAM6M,+CAQfK,EAAUjK,GAAI,IAChBkK,EAAWlI,KAAKjF,MAAhBmN,OACJC,EAAOnI,KAEKoI,EAAQ,IAExBC,CADc,CAAEC,OAAQtI,KAAKI,MAAM6G,QAAS3I,KAAM,QAC/B,SAASiK,EAAKC,GAC3BA,EAAQC,KACVC,KAAoBC,MAAM,0BAE1BT,EAAO,CACLzM,KAAMc,cAAUd,KAChBC,MAAOa,cAAUb,MACjBkM,SAAUO,EAAK/H,MAAMwH,SACrBK,SAAUA,EACVjK,GAAIA,EACJiJ,QAASkB,EAAK/H,MAAM4C,OAEtBmF,EAAKnG,SAAS,CACZgB,KAAM,GACN8E,WAAW,wCAMV,IAAA1G,EAAApB,KAAA4C,EAUH5C,KAAKI,MARPyH,EAFKjF,EAELiF,QACA7E,EAHKJ,EAGLI,KACA8E,EAJKlF,EAILkF,UACAzH,EALKuC,EAKLvC,cACA0H,EANKnF,EAMLmF,kBACAH,EAPKhF,EAOLgF,SACAD,EARK/E,EAQL+E,UACArH,EATKsC,EASLtC,SAEF,OACE9D,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACEjJ,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,IAAIkI,EAAQ7E,MAC3BxG,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,kCACbnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,6BACbnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,oBACbnD,EAAAC,EAAAC,cAAA,OACEkM,IAAKf,EAAQjM,KAAKH,KAClBoN,IAAG,mCAAA9H,OAAqC8G,EAAQjM,KAAKH,KAAKqN,WACxD,IACA,IAFC,sBAIHnJ,UAAU,eAEXkI,EAAQjM,KAAKH,KAAM,IACpBe,EAAAC,EAAAC,cAAA,KACEiD,UAAS,2BAAAoB,OAA6B8G,EAAQjM,KAAKkH,QAAQC,uBAE7DvG,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,kBACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ8F,WAAW,MAIftL,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,kBAVf,WAcFnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,kCACbnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAUC,IACVoH,UAAWE,EAAQ5G,IACnB8G,mBAAmB,KAGvBpI,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gFAZf,SAaSkI,EAAQ5F,OAEjBzF,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAU4B,IACVyF,UAAWE,EAAQ5G,IACnB8G,mBAAmB,KAGvBpI,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8EAZf,YAaYkI,EAAQ1F,aAKzB2F,EACCtL,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,mCACbnD,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEZ,MAAOyF,EACP+F,YAAY,wBACZxB,MAAO,CAAE1I,MAAO,OAChB2F,SAAU,SAAAzC,GAAC,OACTX,EAAKY,SAAS,CACZgB,KAAMjB,EAAE1E,OAAOE,WAIpByF,EACCxG,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACLsB,MAAM,UACND,UAAU,OACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ3B,eAAe,MAPrB,QAcA7D,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CAAQ1K,KAAK,SAAS2K,UAAQ,EAACrJ,MAAM,UAAUD,UAAU,QAAzD,QAKFnD,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACLsB,MAAM,YACNF,QAAS,WACP0B,EAAKY,SAAS,CACZ8F,WAAW,MALjB,WAaF,GAEDD,EAAQqB,OAASrB,EAAQqB,MAAM3E,OAAS,EACrCsD,EAAQqB,MAAM1H,IAAI,SAACjE,EAAOmE,GAAR,OAChBlF,EAAAC,EAAAC,cAAA,MACEgF,IAAKA,EACL/B,UAAU,sDAEVnD,EAAAC,EAAAC,cAAA,MAAIgF,IAAKA,EAAK/B,UAAU,kBACtBnD,EAAAC,EAAAC,cAACgL,EAAD,CACEtF,SAAU7E,EACVqK,SAAUxG,EAAKhB,MAAMwH,SACrBM,OAAQ9G,EAAKrG,MAAMmN,OACnBiB,OAAQ/H,EAAKrG,MAAMoO,aAK3B,GAGJ3M,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU,WACR,OAAQwL,GACN,KAAK5G,IACHI,EAAK4G,YAAYH,EAAQ5G,IAAK4G,EAAQ3E,WACtC,MACF,KAAKU,IACHxC,EAAK4G,YAAYH,EAAQ5G,IAAK4G,EAAQuB,QACtC,MACF,QACEhI,EAAK4G,YAAYH,EAAQ5G,IAAK4G,EAAQ3C,aAO9C1I,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAAS6L,EACT5L,QAAS,WACPiF,EAAKY,SAAS,CACZ+F,mBAAmB,KAGvB3L,SAAU,WACRgF,EAAKrG,MAAMoO,OAAOxB,EAAWrH,cA3OP+B,aC8LnBgH,eAxLb,SAAAA,IAAc,IAAAvJ,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAqJ,IACZvJ,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAiO,GAAAlJ,KAAAH,QACKI,MAAQ,CACXkB,WAAY,GACZqG,UAAW,GACX2B,mBAAmB,EACnBtG,KAAM,GACN3C,eAAe,GAGjBP,EAAKyJ,WAAazJ,EAAKyJ,WAAW7I,KAAhBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAClBA,EAAK0J,YAAc1J,EAAK0J,YAAY9I,KAAjBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAXPA,kFAcK2C,GACbA,IAAkBzC,KAAKjF,OACzBiF,KAAKgC,SAAS,CACZV,WAAYtB,KAAKjF,MAAMuG,WACvBqG,UAAW3H,KAAKjF,MAAMiD,0CAQf,IACHkK,EAAWlI,KAAKjF,MAAhBmN,OACJC,EAAOnI,KACKoI,EAAQ,IAExBC,CADc,CAAEC,OAAQH,EAAK/H,MAAM4C,KAAM1E,KAAM,QAC5B,SAASiK,EAAKC,GAC3BA,EAAQC,KACVC,KAAoBC,MAAM,0BAE1BT,EAAO,CACLzM,KAAMc,cAAUd,KAChBC,MAAOa,cAAUb,MACjBkM,SAAU5G,IACViH,SAAU,KACVjK,GAAImK,EAAK/H,MAAMuH,UACfV,QAASkB,EAAK/H,MAAM4C,OAEtBmF,EAAKnG,SAAS,CACZgB,KAAM,GACNsG,mBAAmB,2CAMTtL,EAAIM,sGACDsC,6BAAfC,4BACYC,YAAW,GAAAC,OACtBC,IADsB,KAAAD,OACRf,KAAKI,MAAMuH,WADH5G,OACe0I,IADf,KAAA1I,OAC2B/C,GAD3B+C,OACgCzC,GACzD,MACA,CAAE1C,KAAMiF,aAHNK,UAMItD,SACNoC,KAAKjF,MAAMoG,YAEbxD,YAAOuD,kFAGA,IAAAE,EAAApB,KAAA4C,EACwD5C,KAAKI,MAA5DkB,EADDsB,EACCtB,WAAY0B,EADbJ,EACaI,KAAMsG,EADnB1G,EACmB0G,kBAAmBjJ,EADtCuC,EACsCvC,cAE7C,OACE7D,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACEjJ,EAAAC,EAAAC,cAACgN,EAAA,EAAD,CAAM/J,UAAU,YACdnD,EAAAC,EAAAC,cAACiN,EAAA,EAAD,CAAUhK,UAAU,OAElBnD,EAAAC,EAAAC,cAACkN,EAAA,EAAD,KACEpN,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,IACdvN,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,mBAAd,8BAEFnD,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIpK,UAAU,cAC5BnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,wBACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZsH,mBAAmB,MAIvB9M,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,kBAVf,kCAgBH2J,EACC9M,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,mCACbnD,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEZ,MAAOyF,EACP+F,YAAY,0CACZxB,MAAO,CAAE1I,MAAO,OAChB2F,SAAU,SAAAzC,GAAC,OACTX,EAAKY,SAAS,CACZgB,KAAMjB,EAAE1E,OAAOE,WAIpByF,EACCxG,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACLsB,MAAM,UACND,UAAU,OACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ3B,eAAe,MAPrB,QAcA7D,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACL2K,UAAQ,EACRrJ,MAAM,UACND,UAAU,QAJZ,QAUFnD,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACLsB,MAAM,YACNF,QAAS,WACP0B,EAAKY,SAAS,CACZsH,mBAAmB,MALzB,WAaF,GAGF9M,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,iCACX2B,EAAWiD,OAAS,EACjBjD,EAAWE,IAAI,SAACjE,EAAOmE,GAAR,OACblF,EAAAC,EAAAC,cAAA,MAAIgF,IAAKA,EAAK/B,UAAU,QACtBnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,kCACXpC,EAAM6E,SAASZ,IAAI,SAACqG,EAASnG,GAAV,OAClBlF,EAAAC,EAAAC,cAAA,MAAIgF,IAAKA,EAAK/B,UAAU,wBACtBnD,EAAAC,EAAAC,cAACsN,GAAD,CACE5H,SAAUyF,EACVD,SAAU5G,IACVkH,OAAQ9G,EAAKrG,MAAMmN,OACnBiB,OAAQ/H,EAAKoI,qBAOzB,MAKVhN,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAKuJ,qBAlLOlH,uBCLjB,SAASvH,GAAWC,GAAO,IAAAC,EAChBC,IAAMC,UAAS,GADCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACjCM,EADiCH,EAAA,GAC3BI,EAD2BJ,EAAA,GAAAK,EAEVP,IAAMC,SAAS,IAFLS,EAAAP,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEjCyO,EAFiCtO,EAAA,GAExBuO,EAFwBvO,EAAA,GAAAG,EAGVb,IAAMC,SAAS,IAHLa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAGjCqO,EAHiCpO,EAAA,GAGxBqO,EAHwBrO,EAAA,GAAAsO,EAIdpP,IAAMC,SAAS,WAJDoP,EAAAlP,OAAAC,EAAA,EAAAD,CAAAiP,EAAA,GAIjChM,EAJiCiM,EAAA,GAI1BC,EAJ0BD,EAAA,GAKhCpO,EAAqDnB,EAArDmB,QAAS2B,EAA4C9C,EAA5C8C,KAAM2M,EAAsCzP,EAAtCyP,SAAUlM,EAA4BvD,EAA5BuD,KAAMnC,EAAsBpB,EAAtBoB,QAASC,EAAarB,EAAbqB,SAE1CC,EAAc,WAClBd,GAAQ,GACRY,KAGFlB,IAAMqB,UAAU,WACdf,EAAQW,GACRgO,EAAWrM,GACXuM,EAAWI,GACXD,EAASjM,IACR,CAACpC,EAAS2B,EAAM2M,EAAUlM,IAO7B,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACErB,KAAMA,EACNiD,WAAS,EACTpC,QAASE,EACTO,kBAAgB,qBAEhBJ,EAAAC,EAAAC,cAAA,QAAMN,SAbG,SAAMS,GAAN,OAAAE,EAAAN,EAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACbN,EAAMO,iBACNhB,EAAS+N,GAFI,wBAAAlN,EAAAa,YAcPtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAaC,GAAG,qBAAhB,UAAA+C,OAA+C1C,EAA/C,2BACA7B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACY,YAATK,EACC9B,EAAAC,EAAAC,cAAC+N,GAAA,EAAD,CACElM,WAAS,EACT0L,QAASA,EACTvL,aAAcuL,EAAQS,KAAK,SAAAC,GAAI,OAAIA,EAAK1J,MAAQkJ,IAChDS,eAAgB,SAAAC,GAAM,OAAIA,EAAO7H,MACjCwB,SAAU,SAACnH,EAAQyN,GACbA,GACFV,EAAWU,EAAI7J,MAGnB8J,YAAa,SAAAC,GAAM,OACjBxO,EAAAC,EAAAC,cAACyB,EAAA,EAAD/C,OAAA6P,OAAA,CACE1M,WAAS,GACLyM,EAFN,CAGE1D,QAAQ,WACRlJ,OAAO,QACPI,UAAQ,QAKdhC,EAAAC,EAAAC,cAAC+N,GAAA,EAAD,CACElM,WAAS,EACT0L,QAASA,EACTvL,aAAcuL,EAAQS,KAAK,SAAAC,GAAI,OAAIA,EAAK/O,KAAKqF,MAAQkJ,IACrDS,eAAgB,SAAAC,GAAM,OAAIA,EAAOjP,KAAKH,MACtC+I,SAAU,SAACnH,EAAQyN,GACbA,GACFV,EAAWU,EAAIlP,KAAKqF,MAGxB8J,YAAa,SAAAC,GAAM,OACjBxO,EAAAC,EAAAC,cAACyB,EAAA,EAAD/C,OAAA6P,OAAA,CACE1M,WAAS,GACLyM,EAFN,CAGE1D,QAAQ,WACRlJ,OAAO,QACPI,UAAQ,SAMlBhC,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACEhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACEC,QAASrD,EACTsD,UAAU,kBACVC,MAAM,WAHR,UAOApD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAQnB,KAAK,SAASqB,UAAU,mBAAhC,cC8LGuL,eA9Qb,SAAAA,IAAc,IAAApL,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAkL,IACZpL,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAA8P,GAAA/K,KAAAH,QACKI,MAAQ,CACXgC,SAAU,GACVM,SAAU,GACViF,UAAW,GACXwD,UAAW,GACX7B,mBAAmB,EACnBtG,KAAM,GACN3C,eAAe,EACf+K,qBAAqB,EACrB7H,aAAa,GAGfzD,EAAKyJ,WAAazJ,EAAKyJ,WAAW7I,KAAhBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAClBA,EAAK0J,YAAc1J,EAAK0J,YAAY9I,KAAjBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAfPA,kFAkBK2C,GACbA,IAAkBzC,KAAKjF,OACzBiF,KAAKgC,SAAS,CACZI,SAAUpC,KAAKjF,MAAMqH,SACrBM,SAAU1C,KAAKjF,MAAM2H,SACrBiF,UAAW3H,KAAKjF,MAAMiD,0CAQf,IACHkK,EAAWlI,KAAKjF,MAAhBmN,OACJC,EAAOnI,KACKoI,EAAQ,IAExBC,CADc,CAAEC,OAAQH,EAAK/H,MAAM4C,KAAM1E,KAAM,QAC5B,SAASiK,EAAKC,GAC3BA,EAAQC,KACVC,KAAoBC,MAAM,0BAE1BT,EAAO,CACLzM,KAAMc,cAAUd,KAChBC,MAAOa,cAAUb,MACjBkM,SAAUjF,IACVsF,SAAU,KACVjK,GAAImK,EAAK/H,MAAMuH,UACfV,QAASkB,EAAK/H,MAAM4C,OAEtBmF,EAAKnG,SAAS,CACZgB,KAAM,GACNsG,mBAAmB,2CAYT+B,EAAWrN,EAAIM,sGACZsC,6BAAfC,4BACYC,YAAW,GAAAC,OACtB4B,IADsB,KAAA5B,OACVsK,GADUtK,OACE0I,IADF,KAAA1I,OACc/C,GADd+C,OACmBzC,GAC5C,MACA,CAAE1C,KAAMiF,aAHNK,UAMItD,SACNoC,KAAKjF,MAAMoG,YAEbxD,YAAOuD,kFAGA,IAAAE,EAAApB,KAAA4C,EAUH5C,KAAKI,MARPgC,EAFKQ,EAELR,SACAM,EAHKE,EAGLF,SACAiF,EAJK/E,EAIL+E,UACA3E,EALKJ,EAKLI,KACAsG,EANK1G,EAML0G,kBACA8B,EAPKxI,EAOLwI,oBACA/K,EARKuC,EAQLvC,cACAkD,EATKX,EASLW,YAGF,OACE/G,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACEjJ,EAAAC,EAAAC,cAACgN,EAAA,EAAD,CAAM/J,UAAU,iBACdnD,EAAAC,EAAAC,cAACiN,EAAA,EAAD,CAAUhK,UAAU,OAClBnD,EAAAC,EAAAC,cAACkN,EAAA,EAAD,KACEpN,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,IACdvN,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,cAAd,8BAGDyC,EAASmC,OAAS,EACjB/H,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIpK,UAAU,cAC3B4D,EACC/G,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZuB,aAAcnC,EAAKhB,MAAMmD,eAG7B5D,UAAU,yBAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gBAVf,kBAaAnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZuB,aAAcnC,EAAKhB,MAAMmD,eAG7B5D,UAAU,yBAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gBAVf,mBAeJnD,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIpK,UAAU,cAC5BnD,EAAAC,EAAAC,cAACkN,EAAA,EAAD,OAIJpN,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIpK,UAAU,cAC5BnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,wBACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZoJ,qBAAqB,MAIzB5O,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,kBAVf,iCAgBH2J,EACC9M,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,mCACbnD,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEZ,MAAOyF,EACP+F,YAAY,yCACZxB,MAAO,CAAE1I,MAAO,OAChB2F,SAAU,SAAAzC,GAAC,OACTX,EAAKY,SAAS,CACZgB,KAAMjB,EAAE1E,OAAOE,WAIpByF,EACCxG,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACLsB,MAAM,UACND,UAAU,OACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ3B,eAAe,MAPrB,QAcA7D,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACL2K,UAAQ,EACRrJ,MAAM,UACND,UAAU,QAJZ,QAUFnD,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACLsB,MAAM,YACNF,QAAS,WACP0B,EAAKY,SAAS,CACZsH,mBAAmB,MALzB,WAaF,GAGF9M,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,iCACXyC,EAASmC,OAAS,EACfnC,EAASZ,IAAI,SAACjE,EAAOmE,GAAR,OACXlF,EAAAC,EAAAC,cAAA,MAAIgF,IAAKA,EAAK/B,UAAU,kBACrB4D,EACC/G,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,aACbnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8CAAb,KACKpC,EAAM2H,QAAQlC,KADnB,OAKF,GAEFxG,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0CACXpC,EAAM6E,SAASZ,IAAI,SAACqG,EAASnG,GAAV,OAClBlF,EAAAC,EAAAC,cAAA,MAAIgF,IAAKA,EAAK/B,UAAU,kBACtBnD,EAAAC,EAAAC,cAACsN,GAAD,CACE5H,SAAUyF,EACVD,SAAUjF,IACVuF,OAAQ9G,EAAKrG,MAAMmN,OACnBiB,OAAQ,SAACnL,EAAIM,GACX8C,EAAKoI,YAAYjM,EAAM2H,QAAQjE,IAAKjD,EAAIM,aAQtD,MAKV9B,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAKuJ,aAGjB/M,EAAAC,EAAAC,cAAC4O,GAAD,CACEpP,QAASkP,EACTvN,KAAM6E,EACN8H,SAAU7C,EACVrJ,KAAK,UACLnC,QAAS,WACPiF,EAAKY,SAAS,CACZoJ,qBAAqB,KAGzBhP,SAAU,SAAA4B,GACRoD,EAAKY,SAAS,CACZ2F,UAAW3J,EACXoN,qBAAqB,EACrB9B,mBAAmB,eAtQHjH,aC8OfkJ,eA7Ob,SAAAA,IAAc,IAAAzL,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAuL,IACZzL,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAmQ,GAAApL,KAAAH,QACKI,MAAQ,CACXgC,SAAU,GACVM,SAAU,GACViF,UAAW,GACX2B,mBAAmB,EACnBtG,KAAM,GACN3C,eAAe,EACf+K,qBAAqB,EACrB7H,aAAa,GAGfzD,EAAKyJ,WAAazJ,EAAKyJ,WAAW7I,KAAhBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAClBA,EAAK0J,YAAc1J,EAAK0J,YAAY9I,KAAjBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAdPA,kFAiBK2C,GACbA,IAAkBzC,KAAKjF,OACzBiF,KAAKgC,SAAS,CACZI,SAAUpC,KAAKjF,MAAMqH,SACrBM,SAAU1C,KAAKjF,MAAM2H,SACrBiF,UAAW3H,KAAKjF,MAAMiD,0CAQf,IACHkK,EAAWlI,KAAKjF,MAAhBmN,OACJC,EAAOnI,KACKoI,EAAQ,IAExBC,CADc,CAAEC,OAAQH,EAAK/H,MAAM4C,KAAM1E,KAAM,QAC5B,SAASiK,EAAKC,GAC3BA,EAAQC,KACVC,KAAoBC,MAAM,0BAE1BT,EAAO,CACLzM,KAAMc,cAAUd,KAChBC,MAAOa,cAAUb,MACjBkM,SAAUhE,IACVqE,SAAU,KACVjK,GAAImK,EAAK/H,MAAMuH,UACfV,QAASkB,EAAK/H,MAAM4C,OAEtBmF,EAAKnG,SAAS,CACZgB,KAAM,GACNsG,mBAAmB,2CAYTkC,EAAUxN,EAAIM,sGACXsC,6BAAfC,4BACYC,YAAW,GAAAC,OACtB6C,IADsB,KAAA7C,OACbyK,GADazK,OACF0I,IADE,KAAA1I,OACU/C,GADV+C,OACezC,GACxC,MACA,CAAE1C,KAAMiF,aAHNK,UAMItD,SACNoC,KAAKjF,MAAMoG,YAEbxD,YAAOuD,kFAGA,IAAAE,EAAApB,KAAA4C,EASH5C,KAAKI,MAPPgC,EAFKQ,EAELR,SACAM,EAHKE,EAGLF,SACAiF,EAJK/E,EAIL+E,UACA3E,EALKJ,EAKLI,KACAsG,EANK1G,EAML0G,kBACA8B,EAPKxI,EAOLwI,oBACA/K,EARKuC,EAQLvC,cAGF,OACE7D,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACEjJ,EAAAC,EAAAC,cAACgN,EAAA,EAAD,CAAM/J,UAAU,iBACdnD,EAAAC,EAAAC,cAACiN,EAAA,EAAD,CAAUhK,UAAU,OAClBnD,EAAAC,EAAAC,cAACkN,EAAA,EAAD,KACEpN,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,IACdvN,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,cAAd,2BAEFnD,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIpK,UAAU,cAC5BnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,wBACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZoJ,qBAAqB,MAIzB5O,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,kBAVf,8BAgBH2J,EACC9M,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,mCACbnD,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACEZ,MAAOyF,EACP+F,YAAY,yCACZxB,MAAO,CAAE1I,MAAO,OAChB2F,SAAU,SAAAzC,GAAC,OACTX,EAAKY,SAAS,CACZgB,KAAMjB,EAAE1E,OAAOE,WAIpByF,EACCxG,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACLsB,MAAM,UACND,UAAU,OACVD,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ3B,eAAe,MAPrB,QAcA7D,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACL2K,UAAQ,EACRrJ,MAAM,UACND,UAAU,QAJZ,QAUFnD,EAAAC,EAAAC,cAACsM,GAAA,EAAD,CACE1K,KAAK,SACLsB,MAAM,YACNF,QAAS,WACP0B,EAAKY,SAAS,CACZsH,mBAAmB,MALzB,WAaF,GAGF9M,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,iCACXyC,EAASmC,OAAS,EACfnC,EAASZ,IAAI,SAACjE,EAAOmE,GAAR,OACXlF,EAAAC,EAAAC,cAAA,MAAIgF,IAAKA,EAAK/B,UAAU,kBACtBnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,6BACbnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,oBACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,QACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHnC,UAAU,0CAETpC,EAAM3B,KAAKH,KACZe,EAAAC,EAAAC,cAAA,KACEiD,UAAS,uBAAAoB,OAAyBxD,EAAM3B,KAAKkH,QAAQC,2BAM/DvG,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0CACXpC,EAAM6E,SAASZ,IAAI,SAACqG,EAASnG,GAAV,OAClBlF,EAAAC,EAAAC,cAAA,MAAIgF,IAAKA,EAAK/B,UAAU,kBACtBnD,EAAAC,EAAAC,cAACsN,GAAD,CACE5H,SAAUyF,EACVD,SAAUhE,IACVsE,OAAQ9G,EAAKrG,MAAMmN,OACnBiB,OAAQ,SAACnL,EAAIM,GACX8C,EAAKoI,YAAYjM,EAAM3B,KAAKqF,IAAKjD,EAAIM,aAQnD,MAKV9B,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAKuJ,aAGjB/M,EAAAC,EAAAC,cAAC4O,GAAD,CACEpP,QAASkP,EACTvN,KAAM6E,EACN8H,SAAU7C,EACVrJ,KAAK,QACLnC,QAAS,WACPiF,EAAKY,SAAS,CACZoJ,qBAAqB,KAGzBhP,SAAU,SAAA4B,GACRoD,EAAKY,SAAS,CACZ2F,UAAW3J,EACXoN,qBAAqB,EACrB9B,mBAAmB,eArONjH,aCqEZoJ,eA7Eb,SAAAA,IAAc,IAAA3L,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAyL,IACZ3L,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAqQ,GAAAtL,KAAAH,QACKI,MAAQ,CACXsL,kBAAmB,GACnBC,aAAc,GACdC,gBAAiB,GACjBlJ,SAAU,GACVmJ,YAAY,EACZC,cAAc,EACdC,mBAAoB,GACpBxI,aAAa,EACb6F,OAAQ,CAAEnI,IAAK,GAAIxF,KAAM,IACzBuQ,cAAe,CAAE/K,IAAK,GAAI+B,KAAM,KAZtBlD,kFAgBK2C,GACbA,IAAkBzC,KAAKjF,OACzBiF,KAAKgC,SAAS,CACZ0J,kBAAmB1L,KAAKjF,MAAM2Q,kBAC9BC,aAAc3L,KAAKjF,MAAM4Q,aACzBC,gBAAiB5L,KAAKjF,MAAM6Q,gBAC5BlJ,SAAU1C,KAAKjF,MAAM2H,SACrBqJ,mBAAoB/L,KAAKjF,MAAMiD,GAC/BoL,OAAQpJ,KAAKjF,MAAMqO,OACnB4C,cAAehM,KAAKjF,MAAMiR,iDAKvB,IAAApJ,EASH5C,KAAKI,MAPPsL,EAFK9I,EAEL8I,kBACAE,EAHKhJ,EAGLgJ,gBACAlJ,EAJKE,EAILF,SACAiJ,EALK/I,EAKL+I,aACAvC,EANKxG,EAMLwG,OACA4C,EAPKpJ,EAOLoJ,cACAD,EARKnJ,EAQLmJ,mBAGF,OACEvP,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACEjJ,EAAAC,EAAAC,cAACgN,EAAA,EAAD,CAAM/J,UAAU,YACdnD,EAAAC,EAAAC,cAACiN,EAAA,EAAD,CAAUhK,UAAU,OAElBnD,EAAAC,EAAAC,cAACuP,GAAD,CACE3K,WAAYoK,EACZ1N,GAAI+N,EACJ7D,OAAQlI,KAAKjF,MAAMmN,OACnB/G,UAAWnB,KAAKjF,MAAMoG,YAIxB3E,EAAAC,EAAAC,cAACwP,GAAD,CACE9J,SAAUuJ,EACVjJ,SAAUA,EACV1E,GAAIoL,EAAOnI,IACXiH,OAAQlI,KAAKjF,MAAMmN,OACnB/G,UAAWnB,KAAKjF,MAAMoG,YAIxB3E,EAAAC,EAAAC,cAACyP,GAAD,CACE/J,SAAUwJ,EACVlJ,SAAUA,EACV1E,GAAIgO,EAAc/K,IAClBiH,OAAQlI,KAAKjF,MAAMmN,OACnB/G,UAAWnB,KAAKjF,MAAMoG,sBArEVkB,aCuPX+J,eAxOb,SAAAA,IAAc,IAAAtM,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAoM,IACZtM,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAgR,GAAAjM,KAAAH,QACKI,MAAQ,CACXsL,kBAAmB,GACnBC,aAAc,GACdC,gBAAiB,GACjBxC,OAAQ,CAAEnI,IAAK,GAAIxF,KAAM,IACzBuQ,cAAe,CAAE/K,IAAK,GAAI+B,KAAM,IAChCqJ,UAAW,GACXhM,eAAe,EACf4G,QAAS,GACT8E,mBAAoB,GACpBO,YAAatL,IACb0B,SAAU,GACVmJ,YAAY,EACZC,cAAc,GAGhBhM,EAAKyM,aAAezM,EAAKyM,aAAa7L,KAAlBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACpBA,EAAKkI,YAAclI,EAAKkI,YAAYtH,KAAjBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAnBPA,4EA0BDjD,GACXA,EAAMO,iBACN4C,KAAKgC,SAAS,CACZ3B,eAAe,0CAOL,IACJ6H,EAAWlI,KAAKjF,MAAhBmN,OACJC,EAAOnI,KAEKoI,EAAQ,IAExBC,CADc,CAAEC,OAAQtI,KAAKI,MAAM6G,QAAS3I,KAAM,QAC/B,SAASiK,EAAKC,GAC3BA,EAAQC,KACVC,KAAoBC,MAAM,0BAE1BT,EAAO,CACLzM,KAAMc,cAAUd,KAChBC,MAAOa,cAAUb,MACjBuL,QAASkB,EAAK/H,MAAM6G,UAEtBkB,EAAKnG,SAAS,CACZiF,QAAS,mDAMExE,GACbA,IAAkBzC,KAAKjF,OACzBiF,KAAKgC,SAAS,CACZ0J,kBAAmB1L,KAAKjF,MAAM2Q,kBAC9BC,aAAc3L,KAAKjF,MAAM4Q,aACzBC,gBAAiB5L,KAAKjF,MAAM6Q,gBAC5BlJ,SAAU1C,KAAKjF,MAAM2H,SACrBqJ,mBAAoB/L,KAAKjF,MAAMiD,GAC/BsO,YAAatM,KAAKjF,MAAMuD,KACxB8K,OAAQpJ,KAAKjF,MAAMqO,OACnB4C,cAAehM,KAAKjF,MAAMiR,iDAKvB,IAAA5K,EAAApB,KAAA4C,EAWH5C,KAAKI,MATPsL,EAFK9I,EAEL8I,kBACAC,EAHK/I,EAGL+I,aACAC,EAJKhJ,EAILgJ,gBACAlJ,EALKE,EAKLF,SACA0G,EANKxG,EAMLwG,OACA4C,EAPKpJ,EAOLoJ,cACAD,EARKnJ,EAQLmJ,mBACAF,EATKjJ,EASLiJ,WACAC,EAVKlJ,EAULkJ,aAGF,OACEtP,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACEjJ,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,qBACbnD,EAAAC,EAAAC,cAACgN,EAAA,EAAD,CAAM/J,UAAU,iBACdnD,EAAAC,EAAAC,cAACiN,EAAA,EAAD,KACEnN,EAAAC,EAAAC,cAACkN,EAAA,EAAD,KACEpN,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CACEC,GAAG,IACHvC,MAAO,CACLiF,QAAS,OACTC,WAAY,WAGdjQ,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,sCAAd,aAKFnD,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAG,KACNtN,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CAAKjK,UAAU,sBACbnD,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CACEC,GAAG,KACHvC,MAAO,CACLiF,QAAS,OACT5M,MAAO,SAGTpD,EAAAC,EAAAC,cAAA,OACE6K,MAAO,CACLiF,QAAS,OACTC,WAAY,SACZC,OAAQ,UACR9M,MAAO,WAETF,QAAS,kBACP0B,EAAKY,SAAS,SAAAqF,GAAS,OAAAjM,OAAAmK,EAAA,EAAAnK,CAAA,GAClBiM,EADkB,CAErByE,cAAezE,EAAUyE,mBAI7BtP,EAAAC,EAAAC,cAAA,OACEmM,IAAI,4FACJD,IAAI,gBACJrB,MAAO,CACL1I,MAAO,OACPC,OAAQ,OACR6N,YAAa,SAGhBZ,GACCvP,EAAAC,EAAAC,cAACkQ,GAAA,cAAD,CACE9F,KAAM+F,IAAgB,IAAA9L,OAAOgL,KAGjCvP,EAAAC,EAAAC,cAAA,QAAM6K,MAAO,CAAEuF,WAAY,QAA3B,aAGFtQ,EAAAC,EAAAC,cAAA,OACE6K,MAAO,CAAEmF,OAAQ,UAAW9M,MAAO,WACnCF,QAAS,kBACP0B,EAAKY,SAAS,SAAAqF,GAAS,OAAAjM,OAAAmK,EAAA,EAAAnK,CAAA,GAClBiM,EADkB,CAErBwE,YAAaxE,EAAUwE,iBAI3BrP,EAAAC,EAAAC,cAAA,OACEmM,IAAI,oGACJD,IAAI,cACJrB,MAAO,CACL1I,MAAO,OACPC,OAAQ,OACRiO,SAAU,WACVD,WAAY,SAGhBtQ,EAAAC,EAAAC,cAACsQ,GAAA,aAAD,CACEC,UAAWC,IACXjH,OAAQ,CACNU,IAAKwG,GACLC,WACyB,KAAvBrB,EACIA,EACAsB,IACN9L,MAAO+L,YAWpBzB,GACCrP,EAAAC,EAAAC,cAACkN,EAAA,EAAD,KACEpN,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKlK,UAAU,aACbnD,EAAAC,EAAAC,cAACsQ,GAAA,gBAAD,CACEC,UAAWC,IACXjH,OAAQ,CACNU,IAAKwG,GACLC,WACyB,KAAvBrB,EACIA,EACAsB,IACN9L,MAAO+L,IACPjH,SAAUkH,SASnBzB,GACCtP,EAAAC,EAAAC,cAACkN,EAAA,EAAD,KACEpN,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKlK,UAAU,aACbnD,EAAAC,EAAAC,cAACkQ,GAAA,SAAD,CACE9F,KAAM+F,IAAgB,IAAA9L,OAAOgL,OAMrCvP,EAAAC,EAAAC,cAAC8Q,GAAD,CACE9B,kBAAmBA,EACnBC,aAAcA,EACdjJ,SAAUA,EACVkJ,gBAAiBA,EACjBxC,OAAQA,EACR4C,cAAeA,EACfhO,GAAI+N,EACJ7D,OAAQlI,KAAKjF,MAAMmN,OACnB/G,UAAWnB,KAAKjF,MAAMoG,uBA/NTkB,sBCZdoL,GANU,SAAAC,GACvB,MAAO,CACLpP,KAAMqP,KACND,gCCAiBE,eACnB,SAAAA,IAAc,IAAA9N,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAA4N,IACZ9N,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAwS,GAAAzN,KAAAH,QACKI,MAAQ,CACX+E,MAAM,GAHIrF,wEAOL,IAAAsB,EAAApB,KACCmF,EAASnF,KAAKI,MAAd+E,KACR,OACE3I,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACGN,GACC3I,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,aACbnD,EAAAC,EAAAC,cAACsJ,EAAA,mBAAD,CACEC,OAAQ,CACNC,UAAW,SACXtG,MAAO,SACPuG,SAAS,EACTC,UAAW,GACXC,SAAU,KACVC,SAAU,CAER,WACA,WACA,YACA,WACA,WAEFC,QAAS,GACTC,OAAQ,GACRC,YAAY,EACZC,KAAM,GAGNC,IAAKC,OAAOC,SAASC,KACrBC,MAAO,yBACPC,YAAa,UACbzF,MAAO,UACP0F,QAAS,UACTC,QAAS,UACTC,SAAU,cAKlB3K,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACEC,QAAS,kBACP0B,EAAKY,SAAS,SAAAqF,GAAS,OAAAjM,OAAAmK,EAAA,EAAAnK,CAAA,GAClBiM,EADkB,CAErBlC,MAAOkC,EAAUlC,UAGrBmC,QAAQ,YACR3H,UAAU,OACV4H,MAAO,CAAEnI,gBAAiB,UAAWQ,MAAO,QAC5C4H,UAAWhL,EAAAC,EAAAC,cAAC+K,EAAAhL,EAAD,OAVb,iBA9C+B4F,aCOjCwL,GAAW,SAAAC,GAA4C,IAAzCC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,QAASC,EAAyBH,EAAzBG,QAAyBH,EAAhBI,UAC3C,OAGI1R,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACEjJ,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,4BACZnD,EAAAC,EAAAC,cAAA,MAAIsB,GAAG,QAAQ2B,UAAU,6CACtBwO,aAAQJ,GACTvR,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,cAAb,UAEFnD,EAAAC,EAAAC,cAAA,MAAIsB,GAAG,OAAO2B,UAAU,6CACrBwO,aAAQH,GACTxR,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,cAAb,YAEFnD,EAAAC,EAAAC,cAAA,MAAIsB,GAAG,OAAO2B,UAAU,6CACrBwO,aAAQF,GACTzR,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,cAAb,YAEFnD,EAAAC,EAAAC,cAAA,MAAIsB,GAAG,MAAM2B,UAAU,UA2BZyO,eACnB,SAAAA,IAAc,IAAAtO,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAoO,IACZtO,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAgT,GAAAjO,KAAAH,QACKI,MAAQ,CACX8C,UAAW,GACXmL,YAAa,EACb3L,SAAU,GACVrC,eAAe,EACfC,SAAUC,IACV4E,MAAM,EACNmJ,WAAW,EACXC,YAAa,IAGfzO,EAAKW,cAAgBX,EAAKW,cAAcC,KAAnBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACrBA,EAAK0O,eAAiB1O,EAAK0O,eAAe9N,KAApBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAdVA,mFAkBZE,KAAKwO,4DAGYlJ,GACbA,IAActF,KAAKjF,OACrBiF,KAAKgC,SAAS,CACZkB,UAAWlD,KAAKjF,MAAMmI,UACtBmL,YAAarO,KAAKjF,MAAMsT,YACxB3L,SAAU1C,KAAKjF,MAAM2H,SACrB4L,UAAWtO,KAAKjF,MAAM0T,qJAUP7N,6BAAfC,4BACYC,YAAW,GAAAC,OACtBC,IADsB,KAAAD,OACRf,KAAKI,MAAM8C,UAAUjC,KADbF,OACmBf,KAAKI,MAAME,UACvD,MACA,CAAE1E,KAAMiF,aAHNK,UAKItD,SACNoC,KAAKjF,MAAMoG,UAAUnB,KAAKI,MAAM8C,UAAUjC,KAE5CtD,YAAOuD,2LAKeJ,YAAW,GAAAC,OAAI2N,KAAJ3N,OAAe4N,KAAU,gBAAtDC,UACUhR,SACZoC,KAAKgC,SAAS,CACZuM,YAAW,wCAAAxN,OACT6N,EAAU/Q,KAAKgR,SADN,uGAOR,IAAAzN,EAAApB,KAAA4C,EAQH5C,KAAKI,MANP8C,EAFKN,EAELM,UACAmL,EAHKzL,EAGLyL,YACA3L,EAJKE,EAILF,SACArC,EALKuC,EAKLvC,cACAiO,EANK1L,EAML0L,UACAC,EAPK3L,EAOL2L,YAEF,OACE/R,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CAAKjK,UAAU,mCACbnD,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,GAAInK,UAAU,eACrBnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,kCAAkCuD,EAAUzH,MAC1De,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,8BACbnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,2CACZ+C,EAAS6B,QAGX+J,EACC9R,EAAAC,EAAAC,cAAA,QAAMiD,UAAU,yCACb4O,GAGH,GAGF/R,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,iBAAiB2B,UAAU,iCACjCnD,EAAAC,EAAAC,cAACoS,GAAA,EAAD,CACEC,KAAoB,IAAdV,EACNR,SAAUA,GACVmB,YAAU,KAIdxS,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,sBACbnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,2BACZnD,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAUC,IACVF,eAAe,KAGnBV,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,gFAXf,mBAYmBuD,EAAUjB,QAG/BzF,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,0BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKY,SAAS,CACZ1B,SAAU4B,IACV7B,eAAe,KAGnBV,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,8EAXf,sBAYsBuD,EAAUf,WAGlC3F,EAAAC,EAAAC,cAAA,MAAIiD,UAAU,8BACZnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAAS,SAAAqC,GACPA,EAAE3E,iBACFgE,EAAKrG,MAAMgJ,aAAab,EAAUjC,MAEpCtB,UAAU,qGAEVnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,wEARf,sBASsBuD,EAAUd,aAOrCkM,EAAY9R,EAAAC,EAAAC,cAACuS,GAAD,MAAgB,IAG/BzS,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACPiF,EAAKY,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAKS,wBA7JoB4B,iECjCvC6M,GAASC,IAAGC,KAEZC,eACJ,SAAAA,IAAc,IAAAvP,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAqP,IACZvP,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAiU,GAAAlP,KAAAH,QAmDFsP,YAAc,eAAAzO,EAAA0O,EAAAC,EAAAzK,EAAA0K,EAAAvO,EAAA,OAAAnE,EAAAN,EAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAAJ,EAAAN,EAAAiT,MAEO9O,eAFP,cAERC,EAFQ5D,EAAA0S,KAAA1S,EAAAE,KAAA,EAAAJ,EAAAN,EAAAiT,MAIWE,eAJX,cAIRL,EAJQtS,EAAA0S,KAKRH,EAAK,YACLD,EAAW3R,UACb4R,EAAKD,EAAW1R,KAAKgS,OAInB9K,EAAc,GAXN9H,EAAAE,KAAA,GAAAJ,EAAAN,EAAAiT,MAaa5O,YAAW,GAAAC,OAAIC,KAAJD,OAAiB+O,KAAW,QAbpD,eAaRL,EAbQxS,EAAA0S,MAcK/R,UACfmH,EAAc0K,EAAa5R,KAAKoD,KAftBhE,EAAAE,KAAA,GAAAJ,EAAAN,EAAAiT,MAkBI5O,YAAW,GAAAC,OAAI4B,KAAY,OAAQ,CACjD/G,KAAMiF,EACNmC,KAAMlD,EAAKM,MAAM8E,QACjBhC,UAAW6B,EACXyK,GAAIA,KAtBM,QAkBRtO,EAlBQjE,EAAA0S,KAyBZ7P,EAAKkC,SAAS,CACZ+N,cAAehL,IAEb7D,EAAItD,SACN8K,sBAAoB9K,QAAQ,4CAC5BkC,EAAKkC,SAAS,CACZgO,WAAW,KAGbtH,sBAAoBC,MAAMzH,EAAIrD,MAlCpB,yBAAAZ,EAAAa,WAlDZgC,EAAKM,MAAQ,CACX8E,QAAS,GACTe,OAAQ,CACN4I,SAAU,IACVoB,cAAe,IACfC,KAAM,IAER7P,eAAe,EACfkO,YAAa,GACbwB,cAAe,GACfC,WAAW,GAGblQ,EAAKwP,YAAcxP,EAAKwP,YAAY5O,KAAjBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAfPA,mFAmBZE,KAAKmQ,cACLnQ,KAAKoQ,wDAIL,IAAMjI,EAAOnI,KAEbkP,GAAOmB,GCjDsB,oBDiDA,SAAMC,GAAN,IAAAC,EAAAC,EAAA,OAAAzT,EAAAN,EAAAO,MAAA,SAAAyT,GAAA,cAAAA,EAAAvT,KAAAuT,EAAAtT,MAAA,UAC3BgL,EAAKnG,SAAS,CACZuM,YAAW,qCAAAxN,OAAuC2P,KAC/CC,SAASL,EAAM,WACftC,UAFQ,aAAAjN,OAEa2P,KACrBC,SAASL,EAAM,WACfrC,UAJQ,mBAKX+B,WAAW,IAEA,IAATM,EATuB,CAAAG,EAAAtT,KAAA,eAUzBgL,EAAKnG,SAAS,CACZgO,WAAW,IAGTjL,EAAc,GAdO0L,EAAAtT,KAAA,EAAAJ,EAAAN,EAAAiT,MAgBA5O,YAAW,GAAAC,OAAIC,KAAJD,OAAiB+O,KAAW,QAhBvC,QAgBrBL,EAhBqBgB,EAAAd,MAiBR/R,UACfmH,EAAc0K,EAAa5R,KAAKoD,KAElCU,IAAQC,KAAR,cAAAb,OAA2BgE,IApBF,wBAAA0L,EAAA3S,mJAkEbgD,YAAW,GAAAC,OAAI2N,KAAJ3N,OAAe4N,KAAU,gBAAhDzN,UACItD,UACNoC,KAAKgC,SAAS,CACZiE,OAAQ,CACN4I,SAAU3N,EAAIrD,KAAKgR,SACnBoB,cAAe/O,EAAIrD,KAAKoS,cACxBC,KAAMhP,EAAIrD,KAAKqS,KAAKU,MAAM,QAI9B5Q,KAAK6Q,YAAc7Q,KAAK6Q,YAAYnQ,KAAKV,4FAK9B+B,GAAG,IAAAX,EAAApB,KAEhBA,KAAKI,MAAM6F,OAAOiK,KAAKY,QAAQ,SAAAC,IAEY,IAArChP,EAAE1E,OAAOE,MAAMyT,QAAQD,GACzB3P,EAAKY,SAAS,CACZkD,QAASnD,EAAE1E,OAAOE,SAGpBmL,sBAAoBC,MAApB,aAAA5H,OAAuCgQ,EAAvC,oBACAhP,EAAE1E,OAAOE,MAAQwE,EAAE1E,OAAOE,MAAMuL,WAAWiI,EAAS,KAIlDhP,EAAE1E,OAAOE,MAAMgH,OAASnD,EAAKhB,MAAM6F,OAAOgK,gBAC5CvH,sBAAoBC,MAApB,kCAAA5H,OACoCK,EAAKhB,MAAM6F,OAAOgK,cADtD,MAGAlO,EAAE1E,OAAOE,MAAQwE,EAAE1E,OAAOE,MAAMuG,MAAM1C,EAAKhB,MAAM6F,OAAOgK,wDAQ5D,GAA2B,KAAvBjQ,KAAKI,MAAM8E,QAAf,CAKA,IAAImD,EAAYD,EAAQ,KACpB6B,EAAU,CAAE3B,OAAQtI,KAAKI,MAAM8E,QAAS5G,KAAM,QAC9C6J,EAAOnI,KACXqI,EAAU4B,EAAS,SAAS1B,EAAKC,GAC3BA,EAAQC,KACVC,sBAAoBC,MAAM,yBAE1BR,EAAKnG,SAAS,CACZ3B,eAAe,WAZnBqI,sBAAoBC,MAAM,+DAkBrB,IAAAsI,EAAAjR,KAAA4C,EAC2C5C,KAAKI,MAA/CC,EADDuC,EACCvC,cAAe2P,EADhBpN,EACgBoN,UAAWzB,EAD3B3L,EAC2B2L,YAClC,OACE/R,EAAAC,EAAAC,cAACsH,EAAA,SAAD,KACExH,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,eACbnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,2DACbnD,EAAAC,EAAAC,cAAA,KAAGiD,UAAU,wDACbnD,EAAAC,EAAAC,cAAA,YACE6C,WAAS,EACTjB,KAAK,OACL7C,KAAK,UACLyV,KAAM,EACN1M,SAAU,SAAAzC,GACRkP,EAAKE,eAAepP,IAEtBqP,IAAKpR,KAAKI,MAAM6F,OAAOgK,cACvBzR,UAAQ,EACRC,aAAa,MACbsK,YAAY,iDACZpJ,UAAU,sGAEZnD,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,iCACbnD,EAAAC,EAAAC,cAACuG,EAAA,EAAD,CACEnB,GAAG,IACHpC,QAASM,KAAK6Q,YACdlR,UAAU,mDAEVnD,EAAAC,EAAAC,cAAC2U,GAAA5U,EAAD,CAAWkD,UAAU,0EAM5BqQ,EACCxT,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,YACbnD,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CACEC,SAAS,OACTpV,QAAS,WACP8U,EAAKjP,SAAS,CACZgO,WAAW,MAIdzB,IAIL,GAEF/R,EAAAC,EAAAC,cAAC5B,EAAD,CACEoB,QAASmE,EACTlE,QAAS,WACP8U,EAAKjP,SAAS,CACZ3B,eAAe,KAGnBjE,SAAU4D,KAAKsP,sBAjNAjN,aAwNVmP,wBAAWnC,IEvMpBH,GAASC,IAAGC,KAEZqC,eACJ,SAAAA,IAAc,IAAA3R,EAAA,OAAA1E,OAAA2E,EAAA,EAAA3E,CAAA4E,KAAAyR,IACZ3R,EAAA1E,OAAA6E,EAAA,EAAA7E,CAAA4E,KAAA5E,OAAA8E,EAAA,EAAA9E,CAAAqW,GAAAtR,KAAAH,QACKI,MAAQ,CAEX8C,UAAW,GAEXd,SAAU,GAEVkK,YAAatL,IAEb0Q,OAAQ,CACNlC,GAAI,YACJ1M,QAAS,MAGX6O,WAAY,GAEZC,cAAe,GACfC,YAAa,GAEbC,SAAU,GAEVpP,SAAU,GAEVqP,cAAe,GAEf3I,OAAQ,CAAEnI,IAAK,GAAIxF,KAAM,WAEzBuQ,cAAe,CAAE/K,IAAK,GAAI+B,KAAM,IAEhCgP,YAAY,EAEZ3D,YAAa,EAEbxK,YAAY,EAEZoO,eAAe,EAEfvG,kBAAmB,GAEnBE,gBAAiB,GAEjBD,aAAc,IAGhB7L,EAAKoS,cAAgBjX,IAAMkX,YAC3BrS,EAAKsS,aAAenX,IAAMkX,YAG1BrS,EAAKuS,aAAevS,EAAKuS,aAAa3R,KAAlBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACpBA,EAAKsQ,cAAgBtQ,EAAKsQ,cAAc1P,KAAnBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACrBA,EAAKwS,sBAAwBxS,EAAKwS,sBAAsB5R,KAA3BtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAC7BA,EAAKyS,eAAiBzS,EAAKyS,eAAe7R,KAApBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACtBA,EAAK0S,mBAAqB1S,EAAK0S,mBAAmB9R,KAAxBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAC1BA,EAAK2S,cAAgB3S,EAAK2S,cAAc/R,KAAnBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACrBA,EAAK4S,cAAgB5S,EAAK4S,cAAchS,KAAnBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACrBA,EAAK6S,mBAAqB7S,EAAK6S,mBAAmBjS,KAAxBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAC1BA,EAAK8S,qBAAuB9S,EAAK8S,qBAAqBlS,KAA1BtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAC5BA,EAAK+S,kBAAoB/S,EAAK+S,kBAAkBnS,KAAvBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACzBA,EAAKgT,eAAiBhT,EAAKgT,eAAepS,KAApBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IACtBA,EAAKiT,oBAAsBjT,EAAKiT,oBAAoBrS,KAAzBtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAC3BA,EAAKkT,qBAAuBlT,EAAKkT,qBAAqBtS,KAA1BtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IAC5BA,EAAKmT,wBAA0BnT,EAAKmT,wBAAwBvS,KAA7BtF,OAAAuF,EAAA,EAAAvF,CAAA0E,IA9DnBA,kFAiEKwF,GACbA,EAAU4N,eAAiBlT,KAAKjF,MAAMmY,eACxClT,KAAKgC,SAAS,CACZ6B,WAAY7D,KAAKjF,MAAMmY,eAGzBlT,KAAKyS,gJAMPzS,KAAKoQ,gBAGLpQ,KAAKmT,sBAGLnT,KAAKoT,cAGLpT,wBACuBA,KAAKqT,cAAcC,mDACrBtT,KAAKqT,cAAcE,+BADtC3B,mBACAC,uBAFG7P,yBAMLhC,KAAKyS,gBAGLzS,KAAKwS,qBAGLxS,KAAKsS,sBAAsBtS,KAAKjF,MAAMyY,MAAMxI,OAAOhN,IAEnD2D,IAAQ8R,OAAO,SAAC5M,EAAU6M,GACxB,IAAIC,EAAY9M,EAAS+M,SAAShD,MAAM,KACpC5S,EAAK2V,EAAUA,EAAUpP,OAAS,GACE,cAApCoP,EAAUA,EAAUpP,OAAS,IAE/BnD,EAAKkR,sBAAsBtU,4FAS/B,IAAMmK,EAAOnI,KAEbkP,GAAOmB,GDlKoB,kBCkKA,kBAAAtT,EAAAN,EAAAO,MAAA,SAAAyT,GAAA,cAAAA,EAAAvT,KAAAuT,EAAAtT,MAAA,OACzBgL,EAAKnG,SAAS,CACZiQ,eAAe,EACfD,YAAY,IAEd7J,EAAKpN,MAAM0S,kBAAiB,GALH,wBAAAgD,EAAA3S,YAQ3BoR,GAAOmB,GDvKgB,cCuKA,kBAAAtT,EAAAN,EAAAO,MAAA,SAAA6W,GAAA,cAAAA,EAAA3W,KAAA2W,EAAA1W,MAAA,OACrBgL,EAAKiK,aAAa5R,QAAQsT,eAAe,CACvCC,SAAU,WAEZ5L,EAAKoK,iBAJgB,wBAAAsB,EAAA/V,YAQvBoR,GAAOmB,GDhLkB,gBCgLA,SAAS3C,GAC5BvF,EAAKpN,MAAMyY,MAAMxI,OAAOhN,KAAO0P,EAAQxI,QAAQhC,YACjDiF,EAAKnG,SAAS,CACZoH,OAAQsE,EAAQ9R,KAChBoQ,cAAe0B,EAAQxI,QACvBmJ,YAAaX,EAAQ4C,KACrB0B,YAAY,EACZC,eAAe,IAEjB9J,EAAKpN,MAAM0S,kBAAiB,MAKhCyB,GAAOmB,GD/LiB,gBC+LA,SAAS3C,GAC3BvF,EAAKpN,MAAMyY,MAAMxI,OAAOhN,KAAO0P,EAAQxI,QAAQhC,YACjDiF,EAAKnG,SAAS,CACZoH,OAAQsE,EAAQ9R,KAChBoQ,cAAe0B,EAAQxI,QACvBmJ,YAAaX,EAAQ4C,KACrB0B,YAAY,IAId7J,EAAKmK,sBAAsBnK,EAAKpN,MAAMyY,MAAMxI,OAAOhN,sJAShC4R,uBAAnBL,UACW3R,SACboC,KAAKgC,SAAS,CACZ0P,OAAQ,CACNlC,GAAID,EAAW1R,KAAKgS,MACpB/M,QAASyM,EAAW1R,KAAKiF,qMAWThC,YAAW,GAAAC,OAAI2N,KAAJ3N,OAAe4N,KAAU,gBAAtDC,UACUhR,SACZoC,KAAKgC,SAAS,CACZgK,cAAe,CACbhJ,KAAI,wEAAAjC,OACF6N,EAAU/Q,KAAKgR,SADb,eAINR,YAAuC,GAA1BO,EAAU/Q,KAAK8S,2LAShB7P,YAAW,GAAAC,OAAI2N,KAAJ3N,OAAeiT,KAAO,gBAA7C9S,UACItD,UACNqW,SAASC,qBAAqB,SAAS,GAAGC,UAAYjT,EAAIrD,KAAK0D,MAC/D0S,SAASG,kBAAkB,YAAY,GAAGC,QAAUnT,EAAIrD,KAAKyW,SAC7DL,SAASG,kBAAkB,eAAe,GAAGC,QAC3CnT,EAAIrD,KAAKmJ,+FAOahJ,8GAED8C,YAAW,GAAAC,OAAIC,IAAJ,KAAAD,OAAkB/C,GAAM,oBAAxDyR,UACa7R,gCAEfoC,KAAKgC,SAAS,CACZ2P,WAAYlC,EAAa5R,KAAKoD,IAC9BqL,YAAatL,MAGXkC,EAAYuM,EAAa5R,2BAExBqF,sBACcpC,YAAW,GAAAC,OACvBC,IADuB,KAAAD,OACTmC,EAAUjC,KADDF,OACO0I,IADP,KAAA1I,OACmBwT,KAC7C,+BACC1W,WAHHuE,eAFFc,2BAQAlD,KAAKgC,SAAS,CACZkB,UAAWA,IAIblD,KAAK0S,gBAEmC,qBAA7BjD,EAAa5R,KAAKuL,wBAE3BpJ,KAAKwU,mBACLxU,KAAKgC,SAAS,CACZiQ,eAAe,EACfD,YAAY,IAEdhS,KAAKjF,MAAM0S,kBAAiB,kCAE5BzN,KAAKgC,SAAS,CACZqM,YAAa,wBAGOvN,YAAW,GAAAC,OAC5B6C,IAD4B,KAAA7C,OACnB0O,EAAa5R,KAAKuL,QAC9B,qBAFEqL,UAKU7W,gCACRwL,EAASqL,EAAU5W,2BAElBuL,sBACctI,YAAW,GAAAC,OACvB6C,IADuB,KAAA7C,OACd0T,EAAU5W,KAAKoD,KADDF,OACO0I,IADP,KAAA1I,OACmBwT,KAC7C,mCACC1W,WAHHuE,eAFFgH,+CAO6BtI,YAAW,GAAAC,OACnC4B,IADmC,KAAA5B,OACvB0O,EAAa5R,KAAKqH,SACjC,mBAFEwP,SAIA1I,EAAgB,CAClBhJ,KAAM,KAEJ0R,EAAiB9W,gCACnBoO,EAAgB0I,EAAiB7W,8BAE5BmO,sBACclL,YAAW,GAAAC,OACvB4B,IADuB,KAAA5B,OAExB2T,EAAiB7W,KAAKoD,KAFEF,OAGvB0I,IAHuB,KAAA1I,OAGXwT,KACf,6BACC1W,YALHuE,gBAFF4J,uCAUFhM,KAAKgC,SAAS,CACZgK,cAAeA,EACf5C,OAAQA,EACR4I,YAAY,EACZC,eAAe,IAEjBjS,KAAKjF,MAAM0S,kBAAiB,WAIhCzN,KAAKuS,yCAGL5Q,IAAQC,KAAK,2MAQCd,YAAW,GAAAC,OAAIC,IAAJ,KAAAD,OAAkBwS,KAAa,oBAAtDrS,UACItD,yBACF+W,EAAW,GACNC,EAAI,cAAGA,EAAI1T,EAAIrD,KAAK0G,sDAEtBrD,EAAIrD,KAAK+W,uBACI5U,KAAK6U,sBAAsB3T,EAAIrD,KAAK+W,GAAG3T,gCAAvDmB,eAFEc,2BAIJyR,EAAS/S,KAAKsB,WALqB0R,2BAOrC5U,KAAKgC,SAAS,CACZ+P,cAAe4C,iGAKO5P,gHAEVjE,YAAW,GAAAC,OACtBC,IADsB,KAAAD,OACRgE,GADQhE,OACM0I,KAC/B,sBAFEvI,SAIAkB,EAAW,EACXlB,EAAItD,UACNwE,GAAYoD,OAAOtE,EAAIrD,KAAK0G,4BAIPzD,YAAW,GAAAC,OAC7B4B,IAD6B,KAAA5B,OACjB+T,IADiB,KAAA/T,OACEgE,GAClC,oBAFEgQ,UAIWnX,yBACJgX,EAAI,eAAGA,EAAIG,EAAWlX,KAAK0G,oDAClBzD,YAAW,GAAAC,OACtB6C,IADsB,KAAA7C,OACbgU,EAAWlX,KAAK+W,GAAGhZ,MADNmF,OACa0I,KACtC,iBAFEvI,UAIItD,UACNwE,GAAYlB,EAAIrD,KAAK0G,gBANmBqQ,uDAY3B9T,YAAW,GAAAC,OACzB4B,IADyB,KAAA5B,OACb+T,IADa,KAAA/T,OACMgE,GAClC,qBAFFgQ,UAIenX,yBACJgX,EAAI,eAAGA,EAAIG,EAAWlX,KAAK0G,oDAClBzD,YAAW,GAAAC,OACtB4B,IADsB,KAAA5B,OACVgU,EAAWlX,KAAK+W,GAAG3T,KADTF,OACe0I,KACxC,iBAFEvI,UAIItD,UACNwE,GAAYlB,EAAIrD,KAAK0G,gBANmBqQ,qDAWvCxS,uLAOStB,YAAW,GAAAC,OAAI6C,IAAJ,KAAA7C,OAAawS,KAAa,oBAAjDrS,UACItD,yBACF+W,EAAW,GACNC,EAAI,cAAGA,EAAI1T,EAAIrD,KAAK0G,sDAEtBrD,EAAIrD,KAAK+W,uBACK9T,YAAW,GAAAC,OACvB6C,IADuB,KAAA7C,OACdG,EAAIrD,KAAK+W,GAAG3T,KADEF,OACI0I,IADJ,KAAA1I,OACgBwT,KAC1C,4BACC1W,WAHHuE,eAFExG,2BAOJ+Y,EAAS/S,KAAKhG,WARqBgZ,2BAUrC5U,KAAKgC,SAAS,CACZ8P,SAAU6C,uMASE7T,YAAW,GAAAC,OACtB4B,IADsB,eAAA5B,OACAf,KAAKI,MAAM8C,UAAUjC,KAC9C,oBAFEC,UAIItD,yBACFoX,EAAe,GACVJ,EAAI,cAAGA,EAAI1T,EAAIrD,KAAK0G,mDAEPzD,YAAW,GAAAC,OAAI6C,IAAJ,KAAA7C,OAAaG,EAAIrD,KAAK+W,GAAGhZ,MAAQ,oBAA5DqZ,UACQrX,sDAELqX,EAAQpX,yBACMiD,YAAW,GAAAC,OACvB6C,IADuB,KAAA7C,OACdkU,EAAQpX,KAAKoD,KADCF,OACK0I,IADL,KAAA1I,OACiBwT,KAC3C,mCACC1W,WAHHuE,eAFExG,iDASCsF,EAAIrD,KAAK+W,QACNhZ,sBACWkF,YAAW,GAAAC,OACvB4B,IADuB,KAAA5B,OACXG,EAAIrD,KAAK+W,GAAG3T,KADDF,OACO0I,IADP,KAAA1I,OACmBwT,KAC7C,4BACC1W,YAJHjC,UACAwG,eAHE8C,4BAQJ8P,EAAapT,KAAKsD,WApBe0P,2BAuBrC5U,KAAKgC,SAAS,CACZU,SAAUsS,2FASdhV,KAAKkV,oBACLlV,KAAKmV,yBACLnV,KAAKoV,4DAOYvN,mFACb3G,EAAM,sBAEKN,sBAAX5C,SAGA6J,EAAQD,UACV5H,KAAKgC,SAAS,CACZsK,YAAazE,EAAQD,WAGrBC,EAAQ7J,IACVgC,KAAKgC,SAAS,CACZ2P,WAAY9J,EAAQ7J,UAIhBgC,KAAKI,MAAMkM,0BACZtL,aAcA2B,cAiBAiB,kDA9BS9C,YAAW,GAAAC,OAClBC,IADkB,KAAAD,OACJf,KAAKI,MAAMuR,YADP5Q,OACoB0I,KACzC,OACA,CACE7N,KAAMoC,EACNkF,UAAWlD,KAAKI,MAAMuR,WACtB3O,KAAM6E,EAAQZ,QACdgB,SAAUJ,EAAQI,2BAPtB/G,SAUAlB,KAAKiT,0BACLjT,KAAKwS,6EAGO1R,YAAW,GAAAC,OAClB4B,IADkB,KAAA5B,OACNf,KAAKI,MAAMuR,YADL5Q,OACkB0I,KACvC,OACA,CACE7N,KAAMoC,EACNkH,QAASlF,KAAKI,MAAMuR,WACpB3O,KAAM6E,EAAQZ,QACdgB,SAAUJ,EAAQI,2BAPtB/G,SAUAlB,KAAKgT,4BACLhT,yBACuBA,KAAKqT,cAAcC,qDACrBtT,KAAKqT,cAAcE,uCADtC3B,mBACAC,uBAFG7P,iFAMOlB,YAAW,GAAAC,OAClB6C,IADkB,KAAA7C,OACTf,KAAKI,MAAMuR,YADF5Q,OACe0I,KACpC,OACA,CACE7N,KAAMoC,EACNoL,OAAQpJ,KAAKI,MAAMuR,WACnB3O,KAAM6E,EAAQZ,QACdgB,SAAUJ,EAAQI,2BAPtB/G,SAUAlB,KAAKgT,uBACLhT,KAAKuS,kFAMLrR,EAAItD,SACN8K,sBAAoB9K,QAAQ,4CAC5BoC,KAAK0S,iBAELhK,sBAAoBC,MAAMzH,EAAIrD,KAAKwX,qGAQfrX,2EACtBgC,KAAKkS,cAAc1R,QAAQsT,eAAe,CACxCC,SAAU,SACVuB,MAAO,6BAGHtV,KAAKgC,SAAS,CAClB2P,WAAY3T,EACZsO,YAAa3J,wCAET3C,KAAK0S,2GAOa1U,2EACxBgC,KAAKkS,cAAc1R,QAAQsT,eAAe,CACxCC,SAAU,SACVuB,MAAO,6BAGHtV,KAAKgC,SAAS,CAClB2P,WAAY3T,EACZsO,YAAatL,cAEfhB,KAAK0S,qGAOc1U,2EACnBgC,KAAKkS,cAAc1R,QAAQsT,eAAe,CACxCC,SAAU,SACVuB,MAAO,6BAGHtV,KAAKgC,SAAS,CAClB2P,WAAY3T,EACZsO,YAAa1I,wCAET5D,KAAK0S,8LAOPtJ,EAASpJ,KAAKI,MAAMgJ,6BAEnBA,qBACctI,YAAW,GAAAC,OACvB6C,IADuB,KAAA7C,OACdqI,EAAOnI,KADOF,OACD0I,IADC,KAAA1I,OACWwT,KACrC,kCACC1W,WAHHuE,eAFFgH,2BAOI4C,EAAgBhM,KAAKI,MAAM4L,oCAE1BhM,KAAKI,MAAM4L,kCACGlL,YAAW,GAAAC,OACvB4B,IADuB,KAAA5B,OACXiL,EAAc/K,KADHF,OACS0I,IADT,KAAA1I,OACqBwT,KAC/C,4BACC1W,WAHHuE,eAFF4J,2BAOAhM,KAAKgC,SAAS,CACZgK,cAAeA,EACf5C,OAAQA,wMAQctI,YAAW,GAAAC,OAC9BC,IAD8B,KAAAD,OAChBf,KAAKI,MAAM8C,UAAUjC,KADLF,OACW0I,IADX,KAAA1I,OACuBwT,KACxD,gBAFEgB,UAIY3X,UACVsF,EAAYlD,KAAKI,MAAM8C,UAC3BA,EAAS9H,OAAAmK,EAAA,EAAAnK,CAAA,GACJ8H,EADI,CAEPd,SAAUmT,EAAY1X,OAExBmC,KAAKgC,SAAS,CACZkB,UAAWA,yFAQGsS,8GACG1U,YAAW,GAAAC,OAAI4B,IAAJ,KAAA5B,OAAgByU,GAAS,kBAArDC,SACA/S,EAAW,IACX+S,EAAS7X,yBACFgX,EAAI,cAAGA,EAAIa,EAAS5X,KAAK0G,gCAC5BW,EAAUuQ,EAAS5X,KAAK+W,uBACR9T,YAAW,GAAAC,OAC1B6C,IAD0B,KAAA7C,OACjB0U,EAAS5X,KAAK+W,GAAGhZ,MAC7B,uBAFEqZ,6BAImBnU,YAAW,GAAAC,OAC7B4B,IAD6B,KAAA5B,OACjB0U,EAAS5X,KAAK+W,GAAG3T,KADAF,OACM0I,IADN,KAAA1I,OACkBwT,KAClD,gBAFEmB,SAIAT,EAAQrX,SAAW8X,EAAW9X,UAChCsH,EAAQtJ,KAAOqZ,EAAQpX,KACvBqH,EAAQ9C,SAAWsT,EAAW7X,MAEhC6E,EAASd,KAAKsD,WAd0B0P,oDAiBrClS,kKAOP1C,wBACqBA,KAAKqT,cAAcE,+BAAtC1B,uBADG7P,mMASLhC,wBACuBA,KAAKqT,cAAcC,+BAAxC1B,yBADG5P,4GASMI,GAqBX,IApBA,IAmBEyF,EAnBE8N,EAAM,SAANA,EAAO9N,EAAS+N,GAClBA,EAAQ9E,QAAQ,SAAAC,GACd,IAAIxT,EAAQwT,EACe,qBAAhBxT,EAAM2L,QACf3L,EAAM2L,MAAQ,IAGZ3L,EAAM0D,MAAQ4G,EAAQI,SAKtB1K,EAAM2L,MAAM3E,OAAS,GACvBoR,EAAI9N,EAAStK,EAAM2L,OALnB3L,EAAM2L,MAAMtH,KAAKiG,MAUnB+N,EAAU,GAELhB,EAAI,EAAGA,EAAIxS,EAASmC,OAAQqQ,IAAK,EACxC/M,EAAUzF,EAASwS,IACZ,MAAY,GACJ/M,EAAQI,SAQvB0N,EAAI9N,EAAS+N,IANXA,EAAQhU,KAAKiG,GACb+N,EAAQC,KAAK,SAASpZ,EAAGqZ,GACvB,OAAOA,EAAE7T,MAAQxF,EAAEwF,SAMzB,OAAO2T,8JAOS9U,YAAW,GAAAC,OACtBC,IADsB,KAAAD,OACRf,KAAKI,MAAM8C,UAAUjC,KADbF,OACmB0I,KAC5C,kBAFEvI,SAIAkB,EAAW,KACXlB,EAAItD,SAAWsD,EAAIrD,KAAK0G,OAAS,oBAC/BwR,EAAe,GACVC,EAAI,cAAGA,EAAI9U,EAAIrD,KAAK0G,gCACvBsD,EAAU3G,EAAIrD,KAAKmY,uBACHlV,YAAW,GAAAC,OAAI6C,IAAJ,KAAA7C,OAAaG,EAAIrD,KAAKmY,GAAGpa,MAAQ,iBAA5DqZ,UACQrX,UACViK,EAAQjM,KAAOqZ,EAAQpX,MAEzBkY,EAAanU,KAAKiG,WANiBmO,2BAQrC5T,EAASR,KAAK,CACZsB,UAAWlD,KAAKI,MAAM8C,UACtBd,SAAUpC,KAAKiW,aAAaF,aAIhC/V,KAAKgC,SAAS,CACZ0J,kBAAmBtJ,IAErBpC,KAAKgC,SAAS,CACZ0J,kBAAmBtJ,qNAQEtB,YAAW,GAAAC,OAC7B4B,IAD6B,KAAA5B,OACjB+T,IADiB,KAAA/T,OACEf,KAAKI,MAAM8C,UAAUjC,KACvD,kBAFE8T,SAIA3S,EAAW,IACX2S,EAAWnX,yBACJgX,EAAI,cAAGA,EAAIG,EAAWlX,KAAK0G,mDAClBzD,YAAW,GAAAC,OACtB4B,IADsB,KAAA5B,OACVgU,EAAWlX,KAAK+W,GAAG3T,KADTF,OACe0I,KACxC,qBAFEvI,UAIItD,SAAWsD,EAAIrD,KAAK0G,OAAS,oBAC/BwR,EAAe,GACVC,EAAI,eAAGA,EAAI9U,EAAIrD,KAAK0G,gCACvBsD,EAAU3G,EAAIrD,KAAKmY,uBACHlV,YAAW,GAAAC,OAC1B6C,IAD0B,KAAA7C,OACjBG,EAAIrD,KAAKmY,GAAGpa,MACxB,iBAFEqZ,UAIQrX,UACViK,EAAQjM,KAAOqZ,EAAQpX,MAEzBkY,EAAanU,KAAKiG,WATiBmO,uDAWVlV,YAAW,GAAAC,OACjC6C,IADiC,KAAA7C,OACxBgU,EAAWlX,KAAK+W,GAAGhZ,MAC/B,gBAFEsa,SAIAhR,EAAU6P,EAAWlX,KAAK+W,GAC1BsB,EAAetY,UACjBsH,EAAQtJ,KAAOsa,EAAerY,MAEhCuE,EAASR,KAAK,CACZsD,QAASA,EACT9C,SAAUpC,KAAKiW,aAAaF,aA5BUnB,2BAkC9C5U,KAAKgC,SAAS,CACZ4J,gBAAiBxJ,IAEnBpC,KAAKgC,SAAS,CACZ4J,gBAAiBxJ,gNAQItB,YAAW,GAAAC,OAC7B4B,IAD6B,KAAA5B,OACjB+T,IADiB,KAAA/T,OACEf,KAAKI,MAAM8C,UAAUjC,KACvD,kBAFE8T,SAIA3S,EAAW,IACX2S,EAAWnX,yBACJgX,EAAI,cAAGA,EAAIG,EAAWlX,KAAK0G,mDAClBzD,YAAW,GAAAC,OACtB6C,IADsB,KAAA7C,OACbgU,EAAWlX,KAAK+W,GAAGhZ,MADNmF,OACa0I,KACtC,qBAFEvI,UAIItD,SAAWsD,EAAIrD,KAAK0G,OAAS,oBAC/BwR,EAAe,GACVC,EAAI,eAAGA,EAAI9U,EAAIrD,KAAK0G,gCACvBsD,EAAU3G,EAAIrD,KAAKmY,uBACHlV,YAAW,GAAAC,OAC1B6C,IAD0B,KAAA7C,OACjBG,EAAIrD,KAAKmY,GAAGpa,MACxB,iBAFEqZ,UAIQrX,UACViK,EAAQjM,KAAOqZ,EAAQpX,MAEzBkY,EAAanU,KAAKiG,WATiBmO,uDAWVlV,YAAW,GAAAC,OACjC6C,IADiC,KAAA7C,OACxBgU,EAAWlX,KAAK+W,GAAGhZ,MAC/B,iBAFEsa,UAIetY,SACjBwE,EAASR,KAAK,CACZhG,KAAMsa,EAAerY,KACrBuE,SAAUpC,KAAKiW,aAAaF,aAzBQnB,2BAgC9C5U,KAAKgC,SAAS,CACZ2J,aAAcvJ,IAEhBpC,KAAKgC,SAAS,CACZ2J,aAAcvJ,oFAIT,IAAAQ,EAiBH5C,KAAKI,MAfPsC,EAFKE,EAELF,SACAQ,EAHKN,EAGLM,UACAwI,EAJK9I,EAIL8I,kBACAC,EALK/I,EAKL+I,aACAC,EANKhJ,EAMLgJ,gBACAgG,EAPKhP,EAOLgP,cACAC,EARKjP,EAQLiP,YACAC,EATKlP,EASLkP,SACAC,EAVKnP,EAULmP,cACA3I,EAXKxG,EAWLwG,OACA4C,EAZKpJ,EAYLoJ,cACAgG,EAbKpP,EAaLoP,WACA3D,EAdKzL,EAcLyL,YACAxK,EAfKjB,EAeLiB,WACAoO,EAhBKrP,EAgBLqP,cAGF,OACEzV,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,SAAP,KACEjJ,EAAAC,EAAAC,cAACyZ,EAAA,EAAD,MACA3Z,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CAAKjK,UAAU,kBACZkE,EACC,GAEArH,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAKpK,UAAU,kBAC5BnD,EAAAC,EAAAC,cAAC0Z,EAAD,CACE7U,MAAM,iBACND,WAAYyQ,EACZ5Q,UAAWnB,KAAKwS,qBAElBhW,EAAAC,EAAAC,cAAC2Z,EAAD,CACE9U,MAAM,eACNmB,SAAUmP,EACV1Q,UAAWnB,KAAK2S,qBAElBnW,EAAAC,EAAAC,cAAC4Z,EAAD,CACEtR,MAAO8M,EACPvQ,MAAM,YACNJ,UAAWnB,KAAKyS,iBAKtBjW,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CACEC,GAAIjG,EAAa,GAAK,EACtBkG,GAAI,GACJpK,UAAWkE,EAAa,SAAW,IAEnCrH,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CAAKjK,UAAU,+BACbnD,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAK0M,GAAI,GAAIzM,GAAI,GAAI0M,GAAI,IACvBha,EAAAC,EAAAC,cAAC+Z,GAAD,OAEFja,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAK0M,GAAI,GAAIzM,GAAI,GAAI0M,GAAI,GAAI7W,UAAU,eACrCnD,EAAAC,EAAAC,cAAA,OAAKga,IAAK1W,KAAKoS,cAEb5V,EAAAC,EAAAC,cAACia,GAAD,CACEzT,UAAWA,EACXmL,YAAaA,EACb3L,SAAUA,EACV+L,QAASwD,EACT9Q,UAAWnB,KAAKsS,sBAChBvO,aAAc/D,KAAK+S,uBAKtBd,EACC,GAEAzV,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CAAKjK,UAAU,wCACbnD,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,IACPtN,EAAAC,EAAAC,cAAA,MACEiD,UACEK,KAAKI,MAAM4R,WACP,iCACA,kCAGLhS,KAAKI,MAAM4R,WAAa,kBAAoB,UAE/CxV,EAAAC,EAAAC,cAACka,EAAD,CACEhb,KAAMwN,EACN9F,QAAS0O,EACT9M,QAAS8G,EACT5E,oBAAqBpH,KAAK6S,kBAC1BnN,iBAAkB1F,KAAK8S,mBAO/BtW,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CAAKjK,UAAU,oCACbnD,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAI,IACPtN,EAAAC,EAAAC,cAAA,OAAKga,IAAK1W,KAAKkS,eACb1V,EAAAC,EAAAC,cAACma,GAAD,CACE7Y,GAAIkF,EAAUjC,IACdyK,kBAAmBA,EACnBC,aAAcA,EACdC,gBAAiBA,EACjBlJ,SAAUA,EACV0G,OAAQA,EACR4C,cAAeA,EACf9D,OAAQlI,KAAKqS,aACblR,UAAWnB,KAAK0S,sBAS7B7O,EACC,GAEArH,EAAAC,EAAAC,cAACmN,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAKpK,UAAU,OAC5BnD,EAAAC,EAAAC,cAACoa,EAAD,CACEpU,SAAUA,EACVnB,MAAO,aACPJ,UAAWnB,KAAKuS,eAChBxO,aAAc/D,KAAK8S,iBAErBtW,EAAAC,EAAAC,cAAC2Z,EAAD,CACE9U,MAAM,iBACNmB,SAAUkP,EACVzQ,UAAWnB,KAAK4S,iCAp8BHvQ,aAy9BdmP,+BACbuF,YAZsB,SAAA3W,GAAK,OAAAhF,OAAAmK,EAAA,EAAAnK,CAAA,GACxBgF,EADwB,CAE3BkO,UAAWlO,EAAM4W,MAAM,CAAC,gBAAiB,YACzC9D,aAAc9S,EAAM4W,MAAM,CAAC,cAAe,kBAGjB,SAAAC,GAAQ,MAAK,CACtCxJ,iBAAkByJ,YAAmBC,GAAwBF,GAC7DG,cAAeF,YAAmBG,KAAqBJ,KAIvDF,CAGEtF","file":"static/js/18.e18c4c2a.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport ClientCaptcha from 'react-client-captcha';\r\nimport { storeUser, getUser } from '../helpers/UserCookie';\r\nimport { notify } from '../helpers/HttpHandler';\r\n\r\nexport default function FormDialog(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [user, setUser] = React.useState({\r\n    name: '',\r\n    email: ''\r\n  });\r\n  const [captchaCode, setCaptchaCode] = React.useState('');\r\n  const { visible, onClose, onSubmit } = props;\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    onClose();\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setOpen(visible);\r\n    setUser(getUser());\r\n  }, [visible]);\r\n\r\n  const submit = async event => {\r\n    event.preventDefault();\r\n    // captcha validation\r\n    if (captchaCode === event.target.captcha.value) {\r\n      let user = {\r\n        name: event.target.name.value,\r\n        email: event.target.email.value\r\n      };\r\n      storeUser(JSON.stringify(user));\r\n      setUser(getUser());\r\n      onSubmit();\r\n      handleClose();\r\n    } else {\r\n      notify({\r\n        success: false,\r\n        data: 'Captcha mismatched!'\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <form onSubmit={submit}>\r\n          <DialogTitle id=\"form-dialog-title\">Welcome To Join Us</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              To send your request in this website, please enter your full name\r\n              and email address here.\r\n            </DialogContentText>\r\n            <TextField\r\n              margin=\"normal\"\r\n              name=\"name\"\r\n              label=\"Full Name\"\r\n              type=\"text\"\r\n              fullWidth\r\n              required\r\n              autoComplete=\"off\"\r\n              defaultValue={user.name}\r\n            />\r\n            <TextField\r\n              margin=\"dense\"\r\n              name=\"email\"\r\n              label=\"Email Address\"\r\n              type=\"email\"\r\n              autoComplete=\"off\"\r\n              fullWidth\r\n              required\r\n              defaultValue={user.email}\r\n            />\r\n            <ClientCaptcha\r\n              captchaCode={code => setCaptchaCode(code)}\r\n              width={400}\r\n              height={60}\r\n              fontSize={50}\r\n              charsCount={6}\r\n              chars=\"abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ123456789\"\r\n              containerClassName=\"captcha-container\"\r\n              captchaClassName=\"captcha\"\r\n              backgroundColor=\"transparent\"\r\n              fontColor=\"#10d876\"\r\n              retry={false}\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"captcha\"\r\n              label=\"Captcha Code\"\r\n              type=\"text\"\r\n              fullWidth\r\n              autoComplete=\"off\"\r\n              required\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              onClick={handleClose}\r\n              className=\"btn btn-default\"\r\n              color=\"primary\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport history from './../helpers/history';\r\nimport SubscribeDialog from './../components/SubscribeDialog';\r\nimport { LIKE, DISLIKE, COUNTDOWNS } from './../api/uri';\r\nimport { httpRequest, getUserId, notify } from './../helpers/HttpHandler';\r\n\r\nclass CountdownList extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      dialogVisible: false,\r\n      likeType: LIKE,\r\n      current: {}\r\n    };\r\n\r\n    this.likeCountdown = this.likeCountdown.bind(this);\r\n  }\r\n\r\n  async likeCountdown() {\r\n    // get user id\r\n    let userId = await getUserId();\r\n    let res = await httpRequest(\r\n      `${COUNTDOWNS}/${this.state.current._id}${this.state.likeType}`,\r\n      'PUT',\r\n      { user: userId }\r\n    );\r\n    if (res.success) {\r\n      this.props.onUpdated();\r\n    }\r\n    notify(res);\r\n  }\r\n\r\n  render() {\r\n    const { dialogVisible } = this.state;\r\n    const { countdowns, title } = this.props;\r\n    return (\r\n      <div className=\"card w-100 shadow-xss rounded-xxl mb-3\">\r\n        <div className=\"card-body d-flex align-items-center p-4\">\r\n          <h4 className=\"fw-700 mb-0 font-xssss text-grey-900\">{title}</h4>\r\n        </div>\r\n        {countdowns.map((value, index) => (\r\n          <div className=\"wrap\" key={index}>\r\n            <div className=\"card-body d-flex pt-0 ps-4 pe-4 pb-0 bor-0\">\r\n              <h4\r\n                className=\"fw-700 text-grey-900 font-xssss mt-1 pointer\"\r\n                onClick={() => {\r\n                  history.push(`/countdown/${value._id}`);\r\n                }}\r\n              >\r\n                {value.name}{' '}\r\n              </h4>\r\n            </div>\r\n            <div className=\"card-body d-flex align-items-center pt-0 ps-4 pe-4 pb-4 text-right\">\r\n              <Link\r\n                to=\"#\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    likeType: LIKE,\r\n                    dialogVisible: true,\r\n                    current: value\r\n                  });\r\n                }}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-thumbs-up text-white bg-primary-gradiant me-1 btn-round-xs font-xss\" />\r\n                Likes {value.likes}\r\n              </Link>\r\n              <Link\r\n                to=\"#\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    likeType: DISLIKE,\r\n                    dialogVisible: true,\r\n                    current: value\r\n                  });\r\n                }}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-thumbs-down text-white bg-red-gradiant me-2 btn-round-xs font-xss\" />\r\n                Dislikes {value.dislikes}\r\n              </Link>\r\n              <Link\r\n                to={`/countdown/${value._id}`}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-message-circle text-dark text-grey-900 btn-round-sm font-lg\" />\r\n                Comments {value.comments}\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.likeCountdown}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountdownList;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { getCountryName } from './../helpers/Country';\r\nimport SubscribeDialog from './../components/SubscribeDialog';\r\nimport { LIKE, DISLIKE, REQUESTS } from './../api/uri';\r\nimport { httpRequest, getUserId, notify } from './../helpers/HttpHandler';\r\n\r\nclass Requests extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      reqeusts: [],\r\n      title: '',\r\n      dialogVisible: false,\r\n      likeType: LIKE,\r\n      current: {}\r\n    };\r\n\r\n    this.likeRequest = this.likeRequest.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    if (previousProps !== this.props) {\r\n      this.setState({\r\n        reqeusts: this.props.requests,\r\n        title: this.props.title\r\n      });\r\n    }\r\n  }\r\n\r\n  async likeRequest() {\r\n    // get user id\r\n    let userId = await getUserId();\r\n    let res = await httpRequest(\r\n      `${REQUESTS}/${this.state.current._id}${this.state.likeType}`,\r\n      'PUT',\r\n      { user: userId }\r\n    );\r\n    if (res.success) {\r\n      this.props.onUpdated();\r\n    }\r\n    notify(res);\r\n  }\r\n\r\n  render() {\r\n    const { reqeusts, title, dialogVisible } = this.state;\r\n    return (\r\n      <div className=\"card w-100 shadow-xss rounded-xxl mb-3\">\r\n        <div className=\"card-body d-flex align-items-center p-4\">\r\n          <h4 className=\"fw-700 mb-0 font-xssss text-grey-900\">{title}</h4>\r\n        </div>\r\n        {reqeusts.map((value, index) => (\r\n          <div className=\"wrap\" key={index}>\r\n            <div className=\"card-body d-flex pt-0 ps-4 pe-4 pb-0 bor-0\">\r\n              <h4 className=\"fw-700 text-grey-900 font-xssss mt-1\">\r\n                {value.user.name}{' '}\r\n                <span className=\"d-block font-xssss fw-500 mt-1 lh-3 text-grey-500\">\r\n                  {getCountryName(value.user.country)}\r\n                  <i\r\n                    className={`flag-icon flag-icon-${value.user.country.toLocaleLowerCase()}`}\r\n                  />\r\n                </span>\r\n              </h4>\r\n            </div>\r\n            <div className=\"card-body d-flex pt-0 ps-4 pe-4 pb-0 bor-0\">\r\n              <h4 className=\"fw-600 text-grey-900 font-xssss mt-1 fs-italic pl-1\">\r\n                \" {value.text} \"\r\n              </h4>\r\n            </div>\r\n            <div className=\"card-body d-flex align-items-center pt-0 ps-4 pe-4 pb-4 text-right\">\r\n              <Link\r\n                to=\"#\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    likeType: LIKE,\r\n                    dialogVisible: true,\r\n                    current: value\r\n                  });\r\n                }}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-thumbs-up text-white bg-primary-gradiant me-1 btn-round-xs font-xss\" />\r\n                LIkes {value.likes}\r\n              </Link>\r\n              <Link\r\n                to=\"#\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    likeType: DISLIKE,\r\n                    dialogVisible: true,\r\n                    current: value\r\n                  });\r\n                }}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-thumbs-down text-white bg-red-gradiant me-2 btn-round-xs font-xss\" />\r\n                Dislikes {value.dislikes}\r\n              </Link>\r\n              <Link\r\n                to={`/countdown/${value.countdown}`}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-message-circle text-dark text-grey-900 btn-round-sm font-lg\" />\r\n                Comments {value.comments}\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.likeRequest}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Requests;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { getCountryName } from './../helpers/Country';\r\nimport SubscribeDialog from './../components/SubscribeDialog';\r\nimport { LIKE, DISLIKE, USERS } from './../api/uri';\r\nimport { httpRequest, getUserId, notify } from './../helpers/HttpHandler';\r\n\r\nclass LiveUsers extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      reqeusts: [],\r\n      title: '',\r\n      page: 1,\r\n      pageSize: 5,\r\n      isDone: false,\r\n      showRequest: false,\r\n      dialogVisible: false,\r\n      likeType: LIKE,\r\n      currentUser: {}\r\n    };\r\n\r\n    this.toogleRequestVisible = this.toogleRequestVisible.bind(this);\r\n    this.handlePageChange = this.handlePageChange.bind(this);\r\n    this.likeUser = this.likeUser.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    if (previousProps !== this.props) {\r\n      this.setState({\r\n        reqeusts: this.props.requests,\r\n        title: this.props.title\r\n      });\r\n    }\r\n  }\r\n\r\n  toogleRequestVisible() {\r\n    this.setState({\r\n      showRequest: !this.state.showRequest\r\n    });\r\n  }\r\n\r\n  handlePageChange(event, value) {\r\n    this.setState({\r\n      page: value\r\n    });\r\n  }\r\n\r\n  async likeUser() {\r\n    // get user id\r\n    let userId = await getUserId();\r\n    let res = await httpRequest(\r\n      `${USERS}/${this.state.currentUser._id}${this.state.likeType}`,\r\n      'PUT',\r\n      { user: userId }\r\n    );\r\n    if (res.success) {\r\n      this.props.onUpdated();\r\n    }\r\n    notify(res);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      reqeusts,\r\n      title,\r\n      showRequest,\r\n      page,\r\n      pageSize,\r\n      dialogVisible\r\n    } = this.state;\r\n    const { simpleMode } = this.props;\r\n    return (\r\n      <div className=\"card w-100 shadow-xss rounded-xxl mb-3\">\r\n        <div className=\"card-body d-flex align-items-center p-4\">\r\n          <h4 className=\"fw-700 mb-0 font-xssss text-grey-900\">{title}</h4>\r\n          <Link\r\n            to=\"#\"\r\n            className=\"fw-600 ms-auto font-xssss text-primary\"\r\n            onClick={this.toogleRequestVisible}\r\n          >\r\n            {showRequest ? 'Hide Request' : 'Show Request'}\r\n          </Link>\r\n        </div>\r\n        {reqeusts\r\n          .slice((page - 1) * pageSize, page * pageSize)\r\n          .map((value, index) => (\r\n            <div className=\"wrap\" key={index}>\r\n              <div className=\"card-body d-flex pt-0 ps-4 pe-4 pb-0 bor-0\">\r\n                <h4 className=\"fw-700 text-grey-900 font-xssss mt-1\">\r\n                  {value.user.name}{' '}\r\n                  <span className=\"d-block font-xssss fw-500 mt-1 lh-3 text-grey-500\">\r\n                    {getCountryName(value.user.country)}\r\n                    <i\r\n                      className={`flag-icon flag-icon-${value.user.country.toLocaleLowerCase()}`}\r\n                    />\r\n                  </span>\r\n                </h4>\r\n              </div>\r\n              <div className=\"card-body d-flex pt-0 ps-4 pe-4 pb-0 bor-0\">\r\n                <h4 className=\"fw-600 text-grey-900 font-xssss mt-1 fs-italic pl-1\">\r\n                  {showRequest ? `\" ${value.text} \"` : ''}\r\n                </h4>\r\n              </div>\r\n              <div\r\n                className={\r\n                  simpleMode\r\n                    ? 'card-body d-flex align-items-center pt-0  pb-3 ps-4 text-right'\r\n                    : 'card-body d-flex align-items-center pt-0  ps-4 text-right pb-0'\r\n                }\r\n              >\r\n                <Link\r\n                  to=\"#\"\r\n                  className=\"emoji-bttn d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                      likeType: LIKE,\r\n                      dialogVisible: true,\r\n                      currentUser: value.user\r\n                    });\r\n                  }}\r\n                >\r\n                  <i className=\"feather-thumbs-up text-white bg-primary-gradiant me-1 btn-round-xs font-xss\" />\r\n                  Likes {value.user.likes}\r\n                </Link>\r\n                <Link\r\n                  to=\"#\"\r\n                  className=\"emoji-bttn d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                      likeType: DISLIKE,\r\n                      dialogVisible: true,\r\n                      currentUser: value.user\r\n                    });\r\n                  }}\r\n                >\r\n                  <i className=\"feather-thumbs-down text-white bg-red-gradiant me-2 btn-round-xs font-xss\" />\r\n                  Dislikes {value.user.dislikes}\r\n                </Link>\r\n                <Link\r\n                  to=\"#\"\r\n                  className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.props.onNewComment(value.user._id);\r\n                  }}\r\n                >\r\n                  <i className=\"feather-message-circle text-dark text-grey-900 btn-round-sm font-lg\" />\r\n                  Comments {value.user.comments}\r\n                </Link>\r\n                {simpleMode ? (\r\n                  <Fragment>\r\n                    <Link\r\n                      to=\"#\"\r\n                      className=\"emoji-bttn d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                    >\r\n                      <i className=\"feather-copy text-dark text-grey-900 btn-round-sm font-xs\" />\r\n                      Same Requests {value.user.sameRequest}\r\n                    </Link>\r\n                    <Link\r\n                      to=\"#\"\r\n                      className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                    >\r\n                      <i className=\"feather-link text-dark text-grey-900 btn-round-sm font-xs\" />\r\n                      Same Links {value.user.sameLinks}\r\n                    </Link>\r\n                  </Fragment>\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </div>\r\n              {simpleMode ? (\r\n                ''\r\n              ) : (\r\n                <div className=\"card-body d-flex align-items-center pt-0 pb-3 text-right\">\r\n                  <Link\r\n                    to=\"#\"\r\n                    className=\"emoji-bttn d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  >\r\n                    <i className=\"feather-copy text-dark text-grey-900 btn-round-sm font-xs\" />\r\n                    Same Requests {value.user.sameRequest}\r\n                  </Link>\r\n                  <Link\r\n                    to=\"#\"\r\n                    className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  >\r\n                    <i className=\"feather-link text-dark text-grey-900 btn-round-sm font-xs\" />\r\n                    Same Links {value.user.sameLinks}\r\n                  </Link>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n\r\n        <div className=\"pagination-container\">\r\n          <Pagination\r\n            count={Math.ceil(reqeusts.length / pageSize)}\r\n            page={page}\r\n            color=\"secondary\"\r\n            onChange={this.handlePageChange}\r\n            showFirstButton\r\n            showLastButton\r\n          />\r\n        </div>\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.likeUser}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LiveUsers;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport { getCountryName } from '../helpers/Country';\r\nimport SubscribeDialog from './../components/SubscribeDialog';\r\nimport { LIKE, DISLIKE, USERS, REQUESTS, PARAM_USER } from './../api/uri';\r\nimport { httpRequest, getUserId, notify } from './../helpers/HttpHandler';\r\nimport history from './../helpers/history';\r\n\r\nclass UserList extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      dialogVisible: false,\r\n      likeType: LIKE,\r\n      currentUser: {}\r\n    };\r\n\r\n    this.likeUser = this.likeUser.bind(this);\r\n    this.goCountdown = this.goCountdown.bind(this);\r\n  }\r\n\r\n  /**\r\n   * like/dislike user\r\n   */\r\n  async likeUser() {\r\n    // get user id\r\n    let userId = await getUserId();\r\n    let res = await httpRequest(\r\n      `${USERS}/${this.state.currentUser._id}${this.state.likeType}`,\r\n      'PUT',\r\n      { user: userId }\r\n    );\r\n    if (res.success) {\r\n      this.props.onUpdated();\r\n    }\r\n    notify(res);\r\n  }\r\n\r\n  /**\r\n   * go to countdown which selected user joined in\r\n   */\r\n  async goCountdown(userId) {\r\n    let reqRes = await httpRequest(\r\n      `${REQUESTS}?${PARAM_USER}=${userId}`,\r\n      'GET'\r\n    );\r\n    if (reqRes.success && reqRes.data.length > 0) {\r\n      let countdownId = reqRes.data[0].countdown;\r\n      history.push(`/countdown/${countdownId}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { users, title } = this.props;\r\n    const { dialogVisible } = this.state;\r\n    return (\r\n      <div className=\"card w-100 shadow-xss rounded-xxl mb-3\">\r\n        <div className=\"card-body d-flex align-items-center p-4\">\r\n          <h4 className=\"fw-700 mb-0 font-xssss text-grey-900\">{title}</h4>\r\n        </div>\r\n        {users.map((value, index) => (\r\n          <div className=\"wrap\" key={index}>\r\n            <div className=\"card-body d-flex pt-0 ps-4 pe-4 pb-0 bor-0\">\r\n              <h4 className=\"fw-700 text-grey-900 font-xssss mt-1\">\r\n                {value.name}{' '}\r\n                <i\r\n                  className={`flag-icon flag-icon-${value.country.toLocaleLowerCase()}`}\r\n                />\r\n                <span className=\"d-block font-xssss fw-500 mt-1 lh-3 text-grey-500\">\r\n                  {getCountryName(value.country)}\r\n                </span>\r\n              </h4>\r\n            </div>\r\n            <div className=\"card-body d-flex align-items-center pt-0 ps-4 pe-4 pb-4 text-right\">\r\n              <Link\r\n                to=\"#\"\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    likeType: LIKE,\r\n                    dialogVisible: true,\r\n                    currentUser: value\r\n                  });\r\n                }}\r\n              >\r\n                <i className=\"feather-thumbs-up text-white bg-primary-gradiant me-1 btn-round-xs font-xss\" />\r\n                Likes {value.likes}\r\n              </Link>\r\n              <Link\r\n                to=\"#\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    likeType: DISLIKE,\r\n                    dialogVisible: true,\r\n                    currentUser: value\r\n                  });\r\n                }}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-thumbs-down text-white bg-red-gradiant me-2 btn-round-xs font-xss\" />\r\n                Dislikes {value.dislikes}\r\n              </Link>\r\n              <Link\r\n                to=\"#\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.goCountdown(value._id);\r\n                }}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-message-circle text-dark text-grey-900 btn-round-sm font-lg\" />\r\n                Comments {value.comments}\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.likeUser}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserList;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { getCountryName } from './../helpers/Country';\r\nimport SubscribeDialog from './SubscribeDialog';\r\nimport { LIKE, DISLIKE, USERS, REQUESTS } from '../api/uri';\r\nimport { httpRequest, getUserId, notify } from '../helpers/HttpHandler';\r\nimport { InlineShareButtons } from 'sharethis-reactjs';\r\nimport { Button } from '@material-ui/core';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport { PopoverBody, PopoverHeader, UncontrolledPopover } from 'reactstrap';\r\n\r\nexport default class Winner extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      user: {\r\n        name: ''\r\n      },\r\n      request: {\r\n        text: ''\r\n      },\r\n      isDone: false,\r\n      show: false,\r\n      dialogVisible: false,\r\n      likeType: LIKE,\r\n      targetType: 0 // 1 - winner, 1 - Request\r\n    };\r\n\r\n    this.likeWinner = this.likeWinner.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps !== this.props && this.props.user && this.props.request) {\r\n      this.setState({\r\n        isDone: this.props.isDone,\r\n        request: this.props.request,\r\n        user: this.props.user\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * like/dislike winner/request\r\n   */\r\n  async likeWinner() {\r\n    // get user id\r\n    let userId = await getUserId();\r\n    let res = {};\r\n    // winner\r\n    if (this.state.targetType === 0) {\r\n      res = await httpRequest(\r\n        `${USERS}/${this.state.user._id}${this.state.likeType}`,\r\n        'PUT',\r\n        { user: userId }\r\n      );\r\n\r\n      if (res.success) {\r\n        if (this.state.likeType === LIKE) {\r\n          this.setState({\r\n            user: {\r\n              ...this.state.user,\r\n              likes: Number(this.state.user.likes) + 1\r\n            }\r\n          });\r\n        } else {\r\n          this.setState({\r\n            user: {\r\n              ...this.state.user,\r\n              dislikes: Number(this.state.user.dislikes) + 1\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    // request\r\n    else {\r\n      res = await httpRequest(\r\n        `${REQUESTS}/${this.state.request._id}${this.state.likeType}`,\r\n        'PUT',\r\n        { user: userId }\r\n      );\r\n\r\n      if (res.success) {\r\n        if (this.state.likeType === LIKE) {\r\n          this.setState({\r\n            request: {\r\n              ...this.state.request,\r\n              likes: Number(this.state.request.likes) + 1\r\n            }\r\n          });\r\n        } else {\r\n          this.setState({\r\n            request: {\r\n              ...this.state.request,\r\n              dislikes: Number(this.state.request.dislikes) + 1\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    notify(res);\r\n  }\r\n\r\n  render() {\r\n    const { isDone, user, request, dialogVisible, show } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"fw-bold mb-0 ft-40 pt-4\">\r\n          {typeof user === 'undefined' ? '' : user.name}\r\n          {user.country ? (\r\n            <span className=\"d-block font-xssss fw-500 mt-1 lh-3 text-grey-500\">\r\n              {getCountryName(user.country)}\r\n              <i\r\n                className={`flag-icon flag-icon-${user.country.toLocaleLowerCase()}`}\r\n              />\r\n            </span>\r\n          ) : (\r\n            ''\r\n          )}\r\n        </h1>\r\n\r\n        {/* user like/dislike isDone */}\r\n        {isDone ? (\r\n          <div>\r\n            <div className=\"align-items-center pt-3\">\r\n              <ul className=\"list-unstyled mb-0 ms-3\">\r\n                <li className=\"list-inline-item likes\">\r\n                  <Link\r\n                    to=\"#\"\r\n                    onClick={e => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        likeType: LIKE,\r\n                        targetType: 0,\r\n                        dialogVisible: true\r\n                      });\r\n                    }}\r\n                    className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  >\r\n                    <i className=\"feather-thumbs-up text-white bg-primary-gradiant me-1 btn-round-xs font-xss\" />\r\n                    Winner Like {user.likes}\r\n                  </Link>\r\n                </li>\r\n                <li className=\"list-inline-item likes\">\r\n                  <Link\r\n                    to=\"#\"\r\n                    onClick={e => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        likeType: DISLIKE,\r\n                        targetType: 0,\r\n                        dialogVisible: true\r\n                      });\r\n                    }}\r\n                    className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  >\r\n                    <i className=\"feather-thumbs-down text-white bg-red-gradiant me-2 btn-round-xs font-xss\" />\r\n                    Winner Dislike {user.dislikes}\r\n                  </Link>\r\n                </li>\r\n                <li className=\"list-inline-item likes m-0\">\r\n                  <Link\r\n                    to=\"#\"\r\n                    onClick={e => {\r\n                      e.preventDefault();\r\n                      this.props.onNewUserComment(user._id);\r\n                    }}\r\n                    className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  >\r\n                    <i className=\"feather-message-circle text-dark text-grey-900 btn-round-xs font-xs\" />\r\n                    Winner Comment {user.comments}\r\n                  </Link>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"align-items-center pt-3\">\r\n              <ul className=\"list-unstyled mb-0 ms-3\">\r\n                <li className=\"list-inline-item likes\">\r\n                  <Link\r\n                    to=\"#\"\r\n                    onClick={e => e.preventDefault()}\r\n                    id=\"sameRequest\"\r\n                    className=\"emoji-bttn d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  >\r\n                    <i className=\"feather-copy text-dark text-grey-900 btn-round-sm font-xs\" />\r\n                    Same Requests {user.sameRequest}\r\n                  </Link>\r\n                  <UncontrolledPopover\r\n                    trigger=\"focus\"\r\n                    placement=\"bottom\"\r\n                    target=\"sameRequest\"\r\n                  >\r\n                    <PopoverHeader>Request</PopoverHeader>\r\n                    <PopoverBody>\r\n                      {`This Same Request Has Been Submitted ${\r\n                        user.sameRequest\r\n                      } More Time`}\r\n                    </PopoverBody>\r\n                  </UncontrolledPopover>\r\n                </li>\r\n                <li className=\"list-inline-item likes\">\r\n                  <Link\r\n                    to=\"#\"\r\n                    onClick={e => e.preventDefault()}\r\n                    id=\"sameLink\"\r\n                    className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                  >\r\n                    <i className=\"feather-link text-dark text-grey-900 btn-round-sm font-xs\" />\r\n                    Same Links {user.sameLinks}\r\n                  </Link>\r\n                  <UncontrolledPopover\r\n                    trigger=\"focus\"\r\n                    placement=\"bottom\"\r\n                    target=\"sameLink\"\r\n                  >\r\n                    <PopoverHeader>Link</PopoverHeader>\r\n                    <PopoverBody>\r\n                      {`This Same Link Has Been Submitted ${\r\n                        user.sameLinks\r\n                      } More Time`}\r\n                    </PopoverBody>\r\n                  </UncontrolledPopover>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        <p className=\"text-left text-center ft-20 pt-4\">\r\n          {'\" '}\r\n          {typeof request === 'undefined' ? '' : request.text}\r\n          {' \"'}\r\n        </p>\r\n\r\n        {show && (\r\n          <div className=\"mt-4 mb-4\">\r\n            <InlineShareButtons\r\n              config={{\r\n                alignment: 'center', // alignment of buttons (left, center, right)\r\n                color: 'social', // set the color of buttons (social, white)\r\n                enabled: true, // show/hide buttons (true, false)\r\n                font_size: 16, // font size for the buttons\r\n                language: 'en', // which language to use (see LANGUAGES)\r\n                networks: [\r\n                  // which networks to include (see SHARING NETWORKS)\r\n                  'whatsapp',\r\n                  'linkedin',\r\n                  'messenger',\r\n                  'facebook',\r\n                  'twitter'\r\n                ],\r\n                padding: 12, // padding within buttons (INTEGER)\r\n                radius: 25, // the corner radius on each button (INTEGER)\r\n                show_total: true,\r\n                size: 40, // the size of each button (INTEGER)\r\n\r\n                // OPTIONAL PARAMETERS\r\n                url: window.location.href,\r\n                image: 'https://bit.ly/2CMhCMC',\r\n                description: 'IWANTII', // (defaults to og:description or twitter:description)\r\n                title: 'IWANTII', // (defaults to og:title or twitter:title)\r\n                message: 'IWANTII', // (only for email sharing)\r\n                subject: 'IWANTII', // (only for email sharing)\r\n                username: 'IWANTII' // (only for twitter sharing)\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* request like/dislike */}\r\n        {isDone ? (\r\n          <div className=\"align-items-center pb-4\">\r\n            <ul className=\"list-unstyled mb-0 ms-3\">\r\n              <li className=\"list-inline-item likes\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                      likeType: LIKE,\r\n                      targetType: 1,\r\n                      dialogVisible: true\r\n                    });\r\n                  }}\r\n                  className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                >\r\n                  <i className=\"feather-thumbs-up text-white bg-primary-gradiant me-1 btn-round-xs font-xss\" />\r\n                  Request Like {request.likes}\r\n                </Link>\r\n              </li>\r\n              <li className=\"list-inline-item likes\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                      likeType: DISLIKE,\r\n                      targetType: 1,\r\n                      dialogVisible: true\r\n                    });\r\n                  }}\r\n                  className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                >\r\n                  <i className=\"feather-thumbs-down text-white bg-red-gradiant me-2 btn-round-xs font-xss\" />\r\n                  Request Dislike {request.dislikes}\r\n                </Link>\r\n              </li>\r\n              <li className=\"list-inline-item likes m-0\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.props.onNewRequestComment(request._id);\r\n                  }}\r\n                  className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                >\r\n                  <i className=\"feather-message-circle text-dark text-grey-900 btn-round-xs font-xs\" />\r\n                  Request Comment {request.comments}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n        {/* Share buttons */}\r\n\r\n        <Button\r\n          onClick={() =>\r\n            this.setState(prevState => ({\r\n              ...prevState,\r\n              show: !prevState.show\r\n            }))\r\n          }\r\n          variant=\"contained\"\r\n          style={{ backgroundColor: '#95d03a', color: '#fff' }}\r\n          startIcon={<ShareIcon />}\r\n        >\r\n          Share\r\n        </Button>\r\n\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.likeWinner}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from 'reactstrap';\r\nimport NotificationManager from 'react-notifications/lib/NotificationManager';\r\nimport { getUser } from './../helpers/UserCookie';\r\nimport SubscribeDialog from './SubscribeDialog';\r\nimport { COUNTDOWNS, DISLIKE, LIKE, USERS } from '../api/uri';\r\n\r\nexport default class Item extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentId: '',\r\n      category: USERS,\r\n      comment: {\r\n        text: 'pending',\r\n        user: {\r\n          name: '',\r\n          country: 'US'\r\n        }\r\n      },\r\n      text: '',\r\n      likeType: LIKE,\r\n      showReply: false,\r\n      dialogVisible: false,\r\n      likeDialogVisible: false\r\n    };\r\n\r\n    this.saveComment = this.saveComment.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps !== this.props) {\r\n      this.setState({\r\n        comment: this.props.comments,\r\n        category: this.props.category\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * save new comment\r\n   */\r\n  saveComment(parentId, id) {\r\n    const { onSave } = this.props;\r\n    var self = this;\r\n\r\n    var spamCheck = require('spam-check');\r\n    var options = { string: this.state.message, type: 'part' };\r\n    spamCheck(options, function(err, results) {\r\n      if (results.spam) {\r\n        NotificationManager.error('Your comment is spam.');\r\n      } else {\r\n        onSave({\r\n          name: getUser().name,\r\n          email: getUser().email,\r\n          category: self.state.category,\r\n          parentId: parentId,\r\n          id: id,\r\n          message: self.state.text\r\n        });\r\n        self.setState({\r\n          text: '',\r\n          showReply: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      comment,\r\n      text,\r\n      showReply,\r\n      dialogVisible,\r\n      likeDialogVisible,\r\n      category,\r\n      currentId,\r\n      likeType\r\n    } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"\">{comment.text}</div>\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <div className=\"commentor-detail\">\r\n              <img\r\n                alt={comment.user.name}\r\n                src={`https://ui-avatars.com/api/name=${comment.user.name.replaceAll(\r\n                  ' ',\r\n                  ''\r\n                )}&background=random`}\r\n                className=\"img-avatar\"\r\n              />\r\n              {comment.user.name}{' '}\r\n              <i\r\n                className={`m-0 flag-icon flag-icon-${comment.user.country.toLocaleLowerCase()}`}\r\n              />\r\n              <Link\r\n                to=\"#\"\r\n                className=\"text-muted ms-3\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    showReply: true\r\n                  });\r\n                }}\r\n              >\r\n                <i className=\"mdi mdi-reply\" /> Reply\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"d-flex align-items-center ms-3\">\r\n              <Link\r\n                to=\"#\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    likeType: LIKE,\r\n                    currentId: comment._id,\r\n                    likeDialogVisible: true\r\n                  });\r\n                }}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-thumbs-up text-white bg-primary-gradiant me-1 btn-round-xs font-xss\" />\r\n                Likes {comment.likes}\r\n              </Link>\r\n              <Link\r\n                to=\"#\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    likeType: DISLIKE,\r\n                    currentId: comment._id,\r\n                    likeDialogVisible: true\r\n                  });\r\n                }}\r\n                className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n              >\r\n                <i className=\"feather-thumbs-down text-white bg-red-gradiant me-2 btn-round-xs font-xss\" />\r\n                Dislikes {comment.dislikes}\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {showReply ? (\r\n          <div className=\"ps-4 pt-2 pb-2 rounded relative\">\r\n            <TextField\r\n              value={text}\r\n              placeholder=\"Type your reply here.\"\r\n              style={{ width: '80%' }}\r\n              onChange={e =>\r\n                this.setState({\r\n                  text: e.target.value\r\n                })\r\n              }\r\n            />\r\n            {text ? (\r\n              <Button\r\n                type=\"button\"\r\n                color=\"primary\"\r\n                className=\"ms-3\"\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  this.setState({\r\n                    dialogVisible: true\r\n                  });\r\n                }}\r\n              >\r\n                Post\r\n              </Button>\r\n            ) : (\r\n              <Button type=\"button\" disabled color=\"primary\" className=\"ms-3\">\r\n                Post\r\n              </Button>\r\n            )}\r\n\r\n            <Button\r\n              type=\"button\"\r\n              color=\"secondary\"\r\n              onClick={() => {\r\n                this.setState({\r\n                  showReply: false\r\n                });\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n        {comment.reply && comment.reply.length > 0\r\n          ? comment.reply.map((value, key) => (\r\n              <ul\r\n                key={key}\r\n                className=\"list-unstyled ps-3 ms-md-4 sub-comment gray-border\"\r\n              >\r\n                <li key={key} className=\"pt-2 text-dark\">\r\n                  <Item\r\n                    comments={value}\r\n                    category={this.state.category}\r\n                    onSave={this.props.onSave}\r\n                    onLike={this.props.onLike}\r\n                  />\r\n                </li>\r\n              </ul>\r\n            ))\r\n          : ''}\r\n\r\n        {/* dialog for reply */}\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={() => {\r\n            switch (category) {\r\n              case COUNTDOWNS:\r\n                this.saveComment(comment._id, comment.countdown);\r\n                break;\r\n              case USERS:\r\n                this.saveComment(comment._id, comment.winner);\r\n                break;\r\n              default:\r\n                this.saveComment(comment._id, comment.request);\r\n                break;\r\n            }\r\n          }}\r\n        />\r\n\r\n        {/* dialog for like comment */}\r\n        <SubscribeDialog\r\n          visible={likeDialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              likeDialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={() => {\r\n            this.props.onLike(currentId, likeType);\r\n          }}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Card, CardBody, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from 'reactstrap';\r\nimport NotificationManager from 'react-notifications/lib/NotificationManager';\r\n\r\nimport Item from './CommentItem';\r\n\r\nimport { COMMENTS, COUNTDOWNS } from '../api/uri';\r\nimport SubscribeDialog from './SubscribeDialog';\r\nimport { getUser } from './../helpers/UserCookie';\r\nimport { getUserId, httpRequest, notify } from '../helpers/HttpHandler';\r\n\r\nclass CountdownComments extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      countdowns: [],\r\n      currentId: '',\r\n      clickedNewComment: false,\r\n      text: '',\r\n      dialogVisible: false\r\n    };\r\n\r\n    this.newComment = this.newComment.bind(this);\r\n    this.likeComment = this.likeComment.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    if (previousProps !== this.props) {\r\n      this.setState({\r\n        countdowns: this.props.countdowns,\r\n        currentId: this.props.id\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * save new comment\r\n   */\r\n  newComment() {\r\n    const { onSave } = this.props;\r\n    let self = this;\r\n    let spamCheck = require('spam-check');\r\n    let options = { string: self.state.text, type: 'part' };\r\n    spamCheck(options, function(err, results) {\r\n      if (results.spam) {\r\n        NotificationManager.error('Your comment is spam.');\r\n      } else {\r\n        onSave({\r\n          name: getUser().name,\r\n          email: getUser().email,\r\n          category: COUNTDOWNS,\r\n          parentId: null,\r\n          id: self.state.currentId,\r\n          message: self.state.text\r\n        });\r\n        self.setState({\r\n          text: '',\r\n          clickedNewComment: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  async likeComment(id, type) {\r\n    let userId = await getUserId();\r\n    let res = await httpRequest(\r\n      `${COUNTDOWNS}/${this.state.currentId}${COMMENTS}/${id}${type}`,\r\n      'PUT',\r\n      { user: userId }\r\n    );\r\n\r\n    if (res.success) {\r\n      this.props.onUpdated();\r\n    }\r\n    notify(res);\r\n  }\r\n\r\n  render() {\r\n    const { countdowns, text, clickedNewComment, dialogVisible } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Card className=\"border-0\">\r\n          <CardBody className=\"p-2\">\r\n            {/* countdown comments */}\r\n            <Row>\r\n              <Col md={6} sm={12}>\r\n                <h5 className=\"card-title mb-0\"> Comments about Countdown</h5>\r\n              </Col>\r\n              <Col md={6} sm={12} className=\"text-right\">\r\n                <Link\r\n                  to=\"#\"\r\n                  className=\"text-muted ms-3 ft-16\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                      clickedNewComment: true\r\n                    });\r\n                  }}\r\n                >\r\n                  <i className=\"mdi mdi-reply\" />\r\n                  Your comment about countdown\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n\r\n            {clickedNewComment ? (\r\n              <div className=\"ps-4 pt-2 pb-1 rounded relative\">\r\n                <TextField\r\n                  value={text}\r\n                  placeholder=\"Type your comment about countdown here.\"\r\n                  style={{ width: '80%' }}\r\n                  onChange={e =>\r\n                    this.setState({\r\n                      text: e.target.value\r\n                    })\r\n                  }\r\n                />\r\n                {text ? (\r\n                  <Button\r\n                    type=\"button\"\r\n                    color=\"primary\"\r\n                    className=\"ms-3\"\r\n                    onClick={e => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        dialogVisible: true\r\n                      });\r\n                    }}\r\n                  >\r\n                    Post\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    type=\"button\"\r\n                    disabled\r\n                    color=\"primary\"\r\n                    className=\"ms-3\"\r\n                  >\r\n                    Post\r\n                  </Button>\r\n                )}\r\n\r\n                <Button\r\n                  type=\"button\"\r\n                  color=\"secondary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      clickedNewComment: false\r\n                    });\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            <ul className=\"media-list list-unstyled mb-0\">\r\n              {countdowns.length > 0\r\n                ? countdowns.map((value, key) => (\r\n                    <li key={key} className=\"mt-3\">\r\n                      <ul className=\"list-unstyled ps-4 sub-comment\">\r\n                        {value.comments.map((comment, key) => (\r\n                          <li key={key} className=\"mt-2 ft-16 text-dark\">\r\n                            <Item\r\n                              comments={comment}\r\n                              category={COUNTDOWNS}\r\n                              onSave={this.props.onSave}\r\n                              onLike={this.likeComment}\r\n                            />\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    </li>\r\n                  ))\r\n                : ''}\r\n            </ul>\r\n          </CardBody>\r\n        </Card>\r\n\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.newComment}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountdownComments;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\nexport default function FormDialog(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = React.useState([]);\r\n  const [checked, setChecked] = React.useState('');\r\n  const [label, setLabel] = React.useState('Request');\r\n  const { visible, data, selected, type, onClose, onSubmit } = props;\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    onClose();\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setOpen(visible);\r\n    setOptions(data);\r\n    setChecked(selected);\r\n    setLabel(type);\r\n  }, [visible, data, selected, type]);\r\n\r\n  const submit = async event => {\r\n    event.preventDefault();\r\n    onSubmit(checked);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        fullWidth\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <form onSubmit={submit}>\r\n          <DialogTitle id=\"form-dialog-title\">{`Choose ${label} To Leave Your Comment`}</DialogTitle>\r\n          <DialogContent>\r\n            {type === 'Request' ? (\r\n              <Autocomplete\r\n                fullWidth\r\n                options={options}\r\n                defaultValue={options.find(item => item._id === checked)}\r\n                getOptionLabel={option => option.text}\r\n                onChange={(target, val) => {\r\n                  if (val) {\r\n                    setChecked(val._id);\r\n                  }\r\n                }}\r\n                renderInput={params => (\r\n                  <TextField\r\n                    fullWidth\r\n                    {...params}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                    required\r\n                  />\r\n                )}\r\n              />\r\n            ) : (\r\n              <Autocomplete\r\n                fullWidth\r\n                options={options}\r\n                defaultValue={options.find(item => item.user._id === checked)}\r\n                getOptionLabel={option => option.user.name}\r\n                onChange={(target, val) => {\r\n                  if (val) {\r\n                    setChecked(val.user._id);\r\n                  }\r\n                }}\r\n                renderInput={params => (\r\n                  <TextField\r\n                    fullWidth\r\n                    {...params}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                    required\r\n                  />\r\n                )}\r\n              />\r\n            )}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              onClick={handleClose}\r\n              className=\"btn btn-default\"\r\n              color=\"primary\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" className=\"btn btn-primary\">\r\n              OK\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Card, CardBody, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from 'reactstrap';\r\nimport NotificationManager from 'react-notifications/lib/NotificationManager';\r\n\r\nimport Item from './CommentItem';\r\n\r\nimport { COMMENTS, REQUESTS } from '../api/uri';\r\nimport SubscribeDialog from './SubscribeDialog';\r\nimport SelectorDialog from './SelectDialog';\r\nimport { getUser } from './../helpers/UserCookie';\r\nimport { getUserId, httpRequest, notify } from '../helpers/HttpHandler';\r\n\r\nclass RequestComments extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      comments: [],\r\n      requests: [],\r\n      currentId: '',\r\n      commentId: '',\r\n      clickedNewComment: false,\r\n      text: '',\r\n      dialogVisible: false,\r\n      selectDialogVisible: false,\r\n      showRequest: false\r\n    };\r\n\r\n    this.newComment = this.newComment.bind(this);\r\n    this.likeComment = this.likeComment.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    if (previousProps !== this.props) {\r\n      this.setState({\r\n        comments: this.props.comments,\r\n        requests: this.props.requests,\r\n        currentId: this.props.id\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * save new comment\r\n   */\r\n  newComment() {\r\n    const { onSave } = this.props;\r\n    let self = this;\r\n    let spamCheck = require('spam-check');\r\n    let options = { string: self.state.text, type: 'part' };\r\n    spamCheck(options, function(err, results) {\r\n      if (results.spam) {\r\n        NotificationManager.error('Your comment is spam.');\r\n      } else {\r\n        onSave({\r\n          name: getUser().name,\r\n          email: getUser().email,\r\n          category: REQUESTS,\r\n          parentId: null,\r\n          id: self.state.currentId,\r\n          message: self.state.text\r\n        });\r\n        self.setState({\r\n          text: '',\r\n          clickedNewComment: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * like/dislike comment\r\n   * @param {String} requestId\r\n   * @param {String} id\r\n   * @param {String} type\r\n   */\r\n  async likeComment(requestId, id, type) {\r\n    let userId = await getUserId();\r\n    let res = await httpRequest(\r\n      `${REQUESTS}/${requestId}${COMMENTS}/${id}${type}`,\r\n      'PUT',\r\n      { user: userId }\r\n    );\r\n\r\n    if (res.success) {\r\n      this.props.onUpdated();\r\n    }\r\n    notify(res);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      comments,\r\n      requests,\r\n      currentId,\r\n      text,\r\n      clickedNewComment,\r\n      selectDialogVisible,\r\n      dialogVisible,\r\n      showRequest\r\n    } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Card className=\"border-0 mt-4\">\r\n          <CardBody className=\"p-2\">\r\n            <Row>\r\n              <Col md={4} sm={12}>\r\n                <h5 className=\"card-title\"> Comments about Requests </h5>\r\n              </Col>\r\n\r\n              {comments.length > 0 ? (\r\n                <Col md={4} sm={12} className=\"text-right\">\r\n                  {showRequest ? (\r\n                    <Link\r\n                      to=\"#\"\r\n                      onClick={e => {\r\n                        e.preventDefault();\r\n                        this.setState({\r\n                          showRequest: !this.state.showRequest\r\n                        });\r\n                      }}\r\n                      className=\"text-muted ms-3 ft-16\"\r\n                    >\r\n                      <i className=\"mdi mdi-eye\" /> Hide Requests\r\n                    </Link>\r\n                  ) : (\r\n                    <Link\r\n                      to=\"#\"\r\n                      onClick={e => {\r\n                        e.preventDefault();\r\n                        this.setState({\r\n                          showRequest: !this.state.showRequest\r\n                        });\r\n                      }}\r\n                      className=\"text-muted ms-3 ft-16\"\r\n                    >\r\n                      <i className=\"mdi mdi-eye\" /> Show Requests\r\n                    </Link>\r\n                  )}\r\n                </Col>\r\n              ) : (\r\n                <Col md={4} sm={12} className=\"text-right\">\r\n                  <Row />\r\n                </Col>\r\n              )}\r\n\r\n              <Col md={4} sm={12} className=\"text-right\">\r\n                <Link\r\n                  to=\"#\"\r\n                  className=\"text-muted ms-3 ft-16\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                      selectDialogVisible: true\r\n                    });\r\n                  }}\r\n                >\r\n                  <i className=\"mdi mdi-reply\" />\r\n                  Your comment about requests\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n\r\n            {clickedNewComment ? (\r\n              <div className=\"ps-4 pt-2 pb-1 rounded relative\">\r\n                <TextField\r\n                  value={text}\r\n                  placeholder=\"Type your comment about requests here.\"\r\n                  style={{ width: '80%' }}\r\n                  onChange={e =>\r\n                    this.setState({\r\n                      text: e.target.value\r\n                    })\r\n                  }\r\n                />\r\n                {text ? (\r\n                  <Button\r\n                    type=\"button\"\r\n                    color=\"primary\"\r\n                    className=\"ms-3\"\r\n                    onClick={e => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        dialogVisible: true\r\n                      });\r\n                    }}\r\n                  >\r\n                    Post\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    type=\"button\"\r\n                    disabled\r\n                    color=\"primary\"\r\n                    className=\"ms-3\"\r\n                  >\r\n                    Post\r\n                  </Button>\r\n                )}\r\n\r\n                <Button\r\n                  type=\"button\"\r\n                  color=\"secondary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      clickedNewComment: false\r\n                    });\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            <ul className=\"media-list list-unstyled mb-0\">\r\n              {comments.length > 0\r\n                ? comments.map((value, key) => (\r\n                    <li key={key} className=\"mt-2 text-dark\">\r\n                      {showRequest ? (\r\n                        <div className=\"mt-2 ps-4\">\r\n                          <p className=\"text-muted fst-italic p-1 bg-light rounded\">\r\n                            \" {value.request.text} \"\r\n                          </p>\r\n                        </div>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                      <ul className=\"list-unstyled ps-4 ms-md-4 sub-comment\">\r\n                        {value.comments.map((comment, key) => (\r\n                          <li key={key} className=\"mt-2 text-dark\">\r\n                            <Item\r\n                              comments={comment}\r\n                              category={REQUESTS}\r\n                              onSave={this.props.onSave}\r\n                              onLike={(id, type) => {\r\n                                this.likeComment(value.request._id, id, type);\r\n                              }}\r\n                            />\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    </li>\r\n                  ))\r\n                : ''}\r\n            </ul>\r\n          </CardBody>\r\n        </Card>\r\n\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.newComment}\r\n        />\r\n\r\n        <SelectorDialog\r\n          visible={selectDialogVisible}\r\n          data={requests}\r\n          selected={currentId}\r\n          type=\"Request\"\r\n          onClose={() => {\r\n            this.setState({\r\n              selectDialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={id => {\r\n            this.setState({\r\n              currentId: id,\r\n              selectDialogVisible: false,\r\n              clickedNewComment: true\r\n            });\r\n          }}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RequestComments;\r\n","import React, { Component } from 'react';\r\nimport { Card, CardBody, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from 'reactstrap';\r\nimport NotificationManager from 'react-notifications/lib/NotificationManager';\r\n\r\nimport Item from './CommentItem';\r\n\r\nimport { COMMENTS, USERS } from '../api/uri';\r\nimport SubscribeDialog from './SubscribeDialog';\r\nimport SelectorDialog from './SelectDialog';\r\nimport { getUser } from './../helpers/UserCookie';\r\nimport { getUserId, httpRequest, notify } from '../helpers/HttpHandler';\r\n\r\nclass UserComments extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      comments: [],\r\n      requests: [],\r\n      currentId: '',\r\n      clickedNewComment: false,\r\n      text: '',\r\n      dialogVisible: false,\r\n      selectDialogVisible: false,\r\n      showRequest: false\r\n    };\r\n\r\n    this.newComment = this.newComment.bind(this);\r\n    this.likeComment = this.likeComment.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    if (previousProps !== this.props) {\r\n      this.setState({\r\n        comments: this.props.comments,\r\n        requests: this.props.requests,\r\n        currentId: this.props.id\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * save new comment\r\n   */\r\n  newComment() {\r\n    const { onSave } = this.props;\r\n    let self = this;\r\n    let spamCheck = require('spam-check');\r\n    let options = { string: self.state.text, type: 'part' };\r\n    spamCheck(options, function(err, results) {\r\n      if (results.spam) {\r\n        NotificationManager.error('Your comment is spam.');\r\n      } else {\r\n        onSave({\r\n          name: getUser().name,\r\n          email: getUser().email,\r\n          category: USERS,\r\n          parentId: null,\r\n          id: self.state.currentId,\r\n          message: self.state.text\r\n        });\r\n        self.setState({\r\n          text: '',\r\n          clickedNewComment: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * like/dislike comment\r\n   * @param {String} winnerId\r\n   * @param {String} id\r\n   * @param {String} type\r\n   */\r\n  async likeComment(winnerId, id, type) {\r\n    let userId = await getUserId();\r\n    let res = await httpRequest(\r\n      `${USERS}/${winnerId}${COMMENTS}/${id}${type}`,\r\n      'PUT',\r\n      { user: userId }\r\n    );\r\n\r\n    if (res.success) {\r\n      this.props.onUpdated();\r\n    }\r\n    notify(res);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      comments,\r\n      requests,\r\n      currentId,\r\n      text,\r\n      clickedNewComment,\r\n      selectDialogVisible,\r\n      dialogVisible\r\n    } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Card className=\"border-0 mt-4\">\r\n          <CardBody className=\"p-2\">\r\n            <Row>\r\n              <Col md={6} sm={12}>\r\n                <h5 className=\"card-title\"> Comments about Users </h5>\r\n              </Col>\r\n              <Col md={6} sm={12} className=\"text-right\">\r\n                <Link\r\n                  to=\"#\"\r\n                  className=\"text-muted ms-3 ft-16\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                      selectDialogVisible: true\r\n                    });\r\n                  }}\r\n                >\r\n                  <i className=\"mdi mdi-reply\" />\r\n                  Your comment about users\r\n                </Link>\r\n              </Col>\r\n            </Row>\r\n\r\n            {clickedNewComment ? (\r\n              <div className=\"ps-4 pt-2 pb-1 rounded relative\">\r\n                <TextField\r\n                  value={text}\r\n                  placeholder=\"Type your comment about requests here.\"\r\n                  style={{ width: '80%' }}\r\n                  onChange={e =>\r\n                    this.setState({\r\n                      text: e.target.value\r\n                    })\r\n                  }\r\n                />\r\n                {text ? (\r\n                  <Button\r\n                    type=\"button\"\r\n                    color=\"primary\"\r\n                    className=\"ms-3\"\r\n                    onClick={e => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        dialogVisible: true\r\n                      });\r\n                    }}\r\n                  >\r\n                    Post\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    type=\"button\"\r\n                    disabled\r\n                    color=\"primary\"\r\n                    className=\"ms-3\"\r\n                  >\r\n                    Post\r\n                  </Button>\r\n                )}\r\n\r\n                <Button\r\n                  type=\"button\"\r\n                  color=\"secondary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      clickedNewComment: false\r\n                    });\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            <ul className=\"media-list list-unstyled mb-0\">\r\n              {comments.length > 0\r\n                ? comments.map((value, key) => (\r\n                    <li key={key} className=\"mt-2 text-dark\">\r\n                      <div className=\"d-flex align-items-center\">\r\n                        <div className=\"commentor-detail\">\r\n                          <h6 className=\"mb-0\">\r\n                            <Link\r\n                              to=\"#\"\r\n                              className=\"text-dark media-heading  card-username\"\r\n                            >\r\n                              {value.user.name}\r\n                              <i\r\n                                className={`flag-icon flag-icon-${value.user.country.toLocaleLowerCase()}`}\r\n                              />\r\n                            </Link>\r\n                          </h6>\r\n                        </div>\r\n                      </div>\r\n                      <ul className=\"list-unstyled ps-4 ms-md-4 sub-comment\">\r\n                        {value.comments.map((comment, key) => (\r\n                          <li key={key} className=\"mt-2 text-dark\">\r\n                            <Item\r\n                              comments={comment}\r\n                              category={USERS}\r\n                              onSave={this.props.onSave}\r\n                              onLike={(id, type) => {\r\n                                this.likeComment(value.user._id, id, type);\r\n                              }}\r\n                            />\r\n                          </li>\r\n                        ))}\r\n                      </ul>\r\n                    </li>\r\n                  ))\r\n                : ''}\r\n            </ul>\r\n          </CardBody>\r\n        </Card>\r\n\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.newComment}\r\n        />\r\n\r\n        <SelectorDialog\r\n          visible={selectDialogVisible}\r\n          data={requests}\r\n          selected={currentId}\r\n          type=\"Users\"\r\n          onClose={() => {\r\n            this.setState({\r\n              selectDialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={id => {\r\n            this.setState({\r\n              currentId: id,\r\n              selectDialogVisible: false,\r\n              clickedNewComment: true\r\n            });\r\n          }}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserComments;\r\n","import React, { Component } from 'react';\r\nimport { Card, CardBody } from 'reactstrap';\r\nimport CountdownComments from './CommentCountdown';\r\nimport RequestsComments from './CommentRequest';\r\nimport UserComments from './CommentUser';\r\n\r\nclass CommentsBox extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      countdownComments: [],\r\n      userComments: [],\r\n      requestComments: [],\r\n      requests: [],\r\n      disqusShow: false,\r\n      facebookShow: false,\r\n      currentCountdownId: '',\r\n      showRequest: false,\r\n      winner: { _id: '', name: '' },\r\n      winnerRequest: { _id: '', text: '' }\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    if (previousProps !== this.props) {\r\n      this.setState({\r\n        countdownComments: this.props.countdownComments,\r\n        userComments: this.props.userComments,\r\n        requestComments: this.props.requestComments,\r\n        requests: this.props.requests,\r\n        currentCountdownId: this.props.id,\r\n        winner: this.props.winner,\r\n        winnerRequest: this.props.winnerRequest\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      countdownComments,\r\n      requestComments,\r\n      requests,\r\n      userComments,\r\n      winner,\r\n      winnerRequest,\r\n      currentCountdownId\r\n    } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Card className=\"border-0\">\r\n          <CardBody className=\"p-2\">\r\n            {/* countdown comments */}\r\n            <CountdownComments\r\n              countdowns={countdownComments}\r\n              id={currentCountdownId}\r\n              onSave={this.props.onSave}\r\n              onUpdated={this.props.onUpdated}\r\n            />\r\n\r\n            {/* user comments */}\r\n            <UserComments\r\n              comments={userComments}\r\n              requests={requests}\r\n              id={winner._id}\r\n              onSave={this.props.onSave}\r\n              onUpdated={this.props.onUpdated}\r\n            />\r\n\r\n            {/* request comments */}\r\n            <RequestsComments\r\n              comments={requestComments}\r\n              requests={requests}\r\n              id={winnerRequest._id}\r\n              onSave={this.props.onSave}\r\n              onUpdated={this.props.onUpdated}\r\n            />\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CommentsBox;\r\n","// React Basic and Bootstrap\r\nimport React, { Component } from 'react';\r\nimport { Row, Col, Card, CardBody } from 'reactstrap';\r\n\r\n// Import Icons\r\nimport { CommentsCount, Comments } from 'react-facebook';\r\nimport { CommentCount, DiscussionEmbed } from 'disqus-react';\r\n\r\nimport CommentsBox from './CommentsBox';\r\nimport { getUser } from './../helpers/UserCookie';\r\nimport NotificationManager from 'react-notifications/lib/NotificationManager';\r\nimport {\r\n  COUNTDOWNS,\r\n  FACEBOOK_APP_URL,\r\n  DISQUS_SHORT_NAME,\r\n  DISQUS_IDENTIFIER,\r\n  DISQUS_TITLE,\r\n  DISQUS_LANGUAGE\r\n} from '../api/uri';\r\n\r\nclass CommentsWidget extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      countdownComments: [],\r\n      userComments: [],\r\n      requestComments: [],\r\n      winner: { _id: '', name: '' },\r\n      winnerRequest: { _id: '', text: '' },\r\n      listTitle: '',\r\n      dialogVisible: false,\r\n      message: '',\r\n      currentCountdownId: '',\r\n      commentType: COUNTDOWNS,\r\n      requests: [],\r\n      disqusShow: false,\r\n      facebookShow: false\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.saveComment = this.saveComment.bind(this);\r\n  }\r\n\r\n  /**\r\n   * pop up captcha dialog\r\n   * @param {Object} event\r\n   */\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.setState({\r\n      dialogVisible: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * save new comment\r\n   */\r\n  saveComment() {\r\n    const { onSave } = this.props;\r\n    var self = this;\r\n\r\n    var spamCheck = require('spam-check');\r\n    var options = { string: this.state.message, type: 'part' };\r\n    spamCheck(options, function(err, results) {\r\n      if (results.spam) {\r\n        NotificationManager.error('Your comment is spam.');\r\n      } else {\r\n        onSave({\r\n          name: getUser().name,\r\n          email: getUser().email,\r\n          message: self.state.message\r\n        });\r\n        self.setState({\r\n          message: ''\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    if (previousProps !== this.props) {\r\n      this.setState({\r\n        countdownComments: this.props.countdownComments,\r\n        userComments: this.props.userComments,\r\n        requestComments: this.props.requestComments,\r\n        requests: this.props.requests,\r\n        currentCountdownId: this.props.id,\r\n        commentType: this.props.type,\r\n        winner: this.props.winner,\r\n        winnerRequest: this.props.winnerRequest\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      countdownComments,\r\n      userComments,\r\n      requestComments,\r\n      requests,\r\n      winner,\r\n      winnerRequest,\r\n      currentCountdownId,\r\n      disqusShow,\r\n      facebookShow\r\n    } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"section text-left\">\r\n          <Card className=\"border-0 mt-3\">\r\n            <CardBody>\r\n              <Row>\r\n                <Col\r\n                  md=\"6\"\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center'\r\n                  }}\r\n                >\r\n                  <h4 className=\"card-title mb-0 text-success ft-25\">\r\n                    Comments\r\n                  </h4>\r\n                </Col>\r\n\r\n                <Col md=\"6\">\r\n                  <Row className=\"align-items-center\">\r\n                    <Col\r\n                      md=\"12\"\r\n                      style={{\r\n                        display: 'flex',\r\n                        color: '#000'\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          cursor: 'pointer',\r\n                          color: '#2e9fff'\r\n                        }}\r\n                        onClick={() =>\r\n                          this.setState(prevState => ({\r\n                            ...prevState,\r\n                            facebookShow: !prevState.facebookShow\r\n                          }))\r\n                        }\r\n                      >\r\n                        <img\r\n                          src=\"https://cdn3.iconfinder.com/data/icons/free-social-icons/67/facebook_circle_color-512.svg\"\r\n                          alt=\"Facebook icon\"\r\n                          style={{\r\n                            width: '40px',\r\n                            height: '40px',\r\n                            marginRight: '7px'\r\n                          }}\r\n                        />\r\n                        {currentCountdownId && (\r\n                          <CommentsCount\r\n                            href={FACEBOOK_APP_URL + `/${currentCountdownId}`}\r\n                          />\r\n                        )}\r\n                        <span style={{ marginLeft: '5px' }}>Comments</span>\r\n                      </div>\r\n\r\n                      <div\r\n                        style={{ cursor: 'pointer', color: '#2e9fff' }}\r\n                        onClick={() =>\r\n                          this.setState(prevState => ({\r\n                            ...prevState,\r\n                            disqusShow: !prevState.disqusShow\r\n                          }))\r\n                        }\r\n                      >\r\n                        <img\r\n                          src=\"https://c.disquscdn.com/next/4e2f508/marketing/assets/img/brand/disqus-social-icon-blue-white.svg\"\r\n                          alt=\"Disqus icon\"\r\n                          style={{\r\n                            width: '50px',\r\n                            height: '50px',\r\n                            position: 'relative',\r\n                            marginLeft: '7px'\r\n                          }}\r\n                        />\r\n                        <CommentCount\r\n                          shortname={DISQUS_SHORT_NAME}\r\n                          config={{\r\n                            url: process.env.PUBLIC_URL,\r\n                            identifier:\r\n                              currentCountdownId !== ''\r\n                                ? currentCountdownId\r\n                                : DISQUS_IDENTIFIER,\r\n                            title: DISQUS_TITLE\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n\r\n              {/* Disqus comment box */}\r\n\r\n              {disqusShow && (\r\n                <Row>\r\n                  <Col className=\"pt-2 pb-2\">\r\n                    <DiscussionEmbed\r\n                      shortname={DISQUS_SHORT_NAME}\r\n                      config={{\r\n                        url: process.env.PUBLIC_URL,\r\n                        identifier:\r\n                          currentCountdownId !== ''\r\n                            ? currentCountdownId\r\n                            : DISQUS_IDENTIFIER,\r\n                        title: DISQUS_TITLE,\r\n                        language: DISQUS_LANGUAGE\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n\r\n              {/* Facebook comment box */}\r\n\r\n              {facebookShow && (\r\n                <Row>\r\n                  <Col className=\"pt-2 pb-2\">\r\n                    <Comments\r\n                      href={FACEBOOK_APP_URL + `/${currentCountdownId}`}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n\r\n              <CommentsBox\r\n                countdownComments={countdownComments}\r\n                userComments={userComments}\r\n                requests={requests}\r\n                requestComments={requestComments}\r\n                winner={winner}\r\n                winnerRequest={winnerRequest}\r\n                id={currentCountdownId}\r\n                onSave={this.props.onSave}\r\n                onUpdated={this.props.onUpdated}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CommentsWidget;\r\n","import { PENDING_TEXT } from './../constant/actionConstants';\r\n\r\nconst setPendingStatus = payload => {\r\n  return {\r\n    type: PENDING_TEXT,\r\n    payload\r\n  };\r\n};\r\nexport default setPendingStatus;\r\n","import React, { Component } from 'react';\r\nimport { InlineShareButtons } from 'sharethis-reactjs';\r\nimport { Button } from '@material-ui/core';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\n\r\nexport default class Sharethis extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      show: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { show } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        {show && (\r\n          <div className=\"mt-4 mb-4\">\r\n            <InlineShareButtons\r\n              config={{\r\n                alignment: 'center', // alignment of buttons (left, center, right)\r\n                color: 'social', // set the color of buttons (social, white)\r\n                enabled: true, // show/hide buttons (true, false)\r\n                font_size: 16, // font size for the buttons\r\n                language: 'en', // which language to use (see LANGUAGES)\r\n                networks: [\r\n                  // which networks to include (see SHARING NETWORKS)\r\n                  'whatsapp',\r\n                  'linkedin',\r\n                  'messenger',\r\n                  'facebook',\r\n                  'twitter'\r\n                ],\r\n                padding: 12, // padding within buttons (INTEGER)\r\n                radius: 25, // the corner radius on each button (INTEGER)\r\n                show_total: true,\r\n                size: 40, // the size of each button (INTEGER)\r\n\r\n                // OPTIONAL PARAMETERS\r\n                url: window.location.href,\r\n                image: 'https://bit.ly/2CMhCMC',\r\n                description: 'IWANTII', // (defaults to og:description or twitter:description)\r\n                title: 'IWANTII', // (defaults to og:title or twitter:title)\r\n                message: 'IWANTII', // (only for email sharing)\r\n                subject: 'IWANTII', // (only for email sharing)\r\n                username: 'IWANTII' // (only for twitter sharing)\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n        <Button\r\n          onClick={() =>\r\n            this.setState(prevState => ({\r\n              ...prevState,\r\n              show: !prevState.show\r\n            }))\r\n          }\r\n          variant=\"contained\"\r\n          className=\"mt-4\"\r\n          style={{ backgroundColor: '#95d03a', color: '#fff' }}\r\n          startIcon={<ShareIcon />}\r\n        >\r\n          Share\r\n        </Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n// CountDown\r\nimport Countdown, { zeroPad } from 'react-countdown-now';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row } from 'reactstrap';\r\n\r\nimport SubscribeDialog from '../../components/SubscribeDialog';\r\nimport { LIKE, COUNTDOWNS, DISLIKE, SETTINGS, CONFIG } from '../../api/uri';\r\nimport { httpRequest, getUserId, notify } from '../../helpers/HttpHandler';\r\nimport Sharethis from './../../components/Sharethis';\r\n\r\n// Renderer callback with condition\r\nconst renderer = ({ hours, minutes, seconds, completed }) => {\r\n  if (completed) {\r\n    // Render a complete state\r\n    return (\r\n      <React.Fragment>\r\n        <ul className=\"count-down list-unstyled\">\r\n          <li id=\"hours\" className=\"count-number list-inline-item m-2 bg-grey\">\r\n            {zeroPad(hours)}\r\n            <p className=\"count-head\">Hours</p>\r\n          </li>\r\n          <li id=\"mins\" className=\"count-number list-inline-item m-2 bg-grey\">\r\n            {zeroPad(minutes)}\r\n            <p className=\"count-head\">Minutes</p>\r\n          </li>\r\n          <li id=\"secs\" className=\"count-number list-inline-item m-2 bg-grey\">\r\n            {zeroPad(seconds)}\r\n            <p className=\"count-head\">Seconds</p>\r\n          </li>\r\n          <li id=\"end\" className=\"h1\" />\r\n        </ul>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  // Render a countdown\r\n  return (\r\n    <React.Fragment>\r\n      <ul className=\"count-down list-unstyled\">\r\n        <li id=\"hours\" className=\"count-number list-inline-item m-2 bg-grey\">\r\n          {zeroPad(hours)}\r\n          <p className=\"count-head\">Hours</p>\r\n        </li>\r\n        <li id=\"mins\" className=\"count-number list-inline-item m-2 bg-grey\">\r\n          {zeroPad(minutes)}\r\n          <p className=\"count-head\">Minutes</p>\r\n        </li>\r\n        <li id=\"secs\" className=\"count-number list-inline-item m-2 bg-grey\">\r\n          {zeroPad(seconds)}\r\n          <p className=\"count-head\">Seconds</p>\r\n        </li>\r\n        <li id=\"end\" className=\"h1\" />\r\n      </ul>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default class CountdownWidget extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      countdown: {},\r\n      currentTime: 0,\r\n      requests: [],\r\n      dialogVisible: false,\r\n      likeType: LIKE,\r\n      show: false,\r\n      isPending: false,\r\n      pendingText: ''\r\n    };\r\n\r\n    this.likeCountdown = this.likeCountdown.bind(this);\r\n    this.getPendingText = this.getPendingText.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getPendingText();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps !== this.props) {\r\n      this.setState({\r\n        countdown: this.props.countdown,\r\n        currentTime: this.props.currentTime,\r\n        requests: this.props.requests,\r\n        isPending: this.props.pending\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * like/dislike countdown\r\n   */\r\n  async likeCountdown() {\r\n    // get user id\r\n    let userId = await getUserId();\r\n    let res = await httpRequest(\r\n      `${COUNTDOWNS}/${this.state.countdown._id}${this.state.likeType}`,\r\n      'PUT',\r\n      { user: userId }\r\n    );\r\n    if (res.success) {\r\n      this.props.onUpdated(this.state.countdown._id);\r\n    }\r\n    notify(res);\r\n  }\r\n\r\n  // get current pending text\r\n  async getPendingText() {\r\n    let configRes = await httpRequest(`${SETTINGS}${CONFIG}`, 'GET');\r\n    if (configRes.success) {\r\n      this.setState({\r\n        pendingText: `The Countdown Starts When It Reaches ${\r\n          configRes.data.minUsers\r\n        } Requests Or More.`\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      countdown,\r\n      currentTime,\r\n      requests,\r\n      dialogVisible,\r\n      isPending,\r\n      pendingText\r\n    } = this.state;\r\n    return (\r\n      <Row className=\"shadow-xss rounded-xxl card p-4\">\r\n        <Col md={12} className=\"text-center\">\r\n          <h4 className=\"text-success mb-0 ft-25 fw-600\">{countdown.name}</h4>\r\n          <div className=\"font-lg fw-600 text-danger\">\r\n            <i className=\"feather-users me-2 fw-600 btn-round-lg\" />\r\n            {requests.length}\r\n          </div>\r\n\r\n          {isPending ? (\r\n            <span className=\"text-warning font-xm m-auto menu-icon\">\r\n              {pendingText}\r\n            </span>\r\n          ) : (\r\n            ''\r\n          )}\r\n\r\n          <div id=\"main-countdown\" className=\"text-center position-relative\">\r\n            <Countdown\r\n              date={currentTime * 1000}\r\n              renderer={renderer}\r\n              controlled\r\n            />\r\n          </div>\r\n          {/* countdown like/dislike */}\r\n          <div className=\"align-items-center\">\r\n            <ul className=\"list-unstyled mb-0 ms-3\">\r\n              <li className=\"list-inline-item likes\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                      likeType: LIKE,\r\n                      dialogVisible: true\r\n                    });\r\n                  }}\r\n                  className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                >\r\n                  <i className=\"feather-thumbs-up text-white bg-primary-gradiant me-1 btn-round-xs font-xss\" />\r\n                  Countdown Likes {countdown.likes}\r\n                </Link>\r\n              </li>\r\n              <li className=\"list-inline-item likes\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                      likeType: DISLIKE,\r\n                      dialogVisible: true\r\n                    });\r\n                  }}\r\n                  className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                >\r\n                  <i className=\"feather-thumbs-down text-white bg-red-gradiant me-2 btn-round-xs font-xss\" />\r\n                  Countdown Dislikes {countdown.dislikes}\r\n                </Link>\r\n              </li>\r\n              <li className=\"list-inline-item likes m-0\">\r\n                <Link\r\n                  to=\"#\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.props.onNewComment(countdown._id);\r\n                  }}\r\n                  className=\"emoji-bttn pointer d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2\"\r\n                >\r\n                  <i className=\"feather-message-circle text-dark text-grey-900 btn-round-xs font-xs\" />\r\n                  Countdown Comments {countdown.comments}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n\r\n          {/* share buttons */}\r\n          {isPending ? <Sharethis /> : ''}\r\n        </Col>\r\n\r\n        <SubscribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.likeCountdown}\r\n        />\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { Link } from 'react-router-dom';\r\nimport { withRouter } from 'react-router';\r\nimport io from 'socket.io-client';\r\nimport { Alert } from '@material-ui/lab';\r\nimport ReplyIcon from '@material-ui/icons/Reply';\r\nimport moment from 'moment';\r\n\r\nimport SubsribeDialog from './../../components/SubscribeDialog';\r\nimport history from './../../helpers/history';\r\nimport { httpRequest, getUserId } from './../../helpers/HttpHandler';\r\nimport { getIP } from './../../helpers/Country';\r\nimport {\r\n  SETTINGS,\r\n  CONFIG,\r\n  COUNTDOWNS,\r\n  CURRENT,\r\n  REQUESTS,\r\n  SOCKET_SERVER_URL\r\n} from './../../api/uri';\r\nimport { PENDING_COUNTDOWN } from '../../api/socket';\r\n\r\n// socket\r\nconst SOCKET = io(SOCKET_SERVER_URL);\r\n\r\nclass MessageBox extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      request: '',\r\n      config: {\r\n        minUsers: 100,\r\n        requestLength: 150,\r\n        bans: []\r\n      },\r\n      dialogVisible: false,\r\n      pendingText: '',\r\n      liveCountdown: '',\r\n      showAlert: false\r\n    };\r\n\r\n    this.sendRequest = this.sendRequest.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchConfig();\r\n    this.connectSocket();\r\n  }\r\n\r\n  connectSocket() {\r\n    const self = this;\r\n    // countdown pending\r\n    SOCKET.on(PENDING_COUNTDOWN, async time => {\r\n      self.setState({\r\n        pendingText: `The countdown will be get started ${moment\r\n          .duration(time, 'seconds')\r\n          .minutes()} minutes ${moment\r\n          .duration(time, 'seconds')\r\n          .seconds()} seconds later.`,\r\n        showAlert: true\r\n      });\r\n      if (time === 0) {\r\n        self.setState({\r\n          showAlert: false\r\n        });\r\n        // new countdown id\r\n        let countdownId = '';\r\n        // get current countdown in progress\r\n        let countdownRes = await httpRequest(`${COUNTDOWNS}${CURRENT}`, 'GET');\r\n        if (countdownRes.success) {\r\n          countdownId = countdownRes.data._id;\r\n        }\r\n        history.push(`/countdown/${countdownId}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  // send reqeust to backend\r\n  sendRequest = async () => {\r\n    // get user id\r\n    let userId = await getUserId();\r\n    // ip\r\n    let ipResponse = await getIP();\r\n    let ip = '127.0.0.1';\r\n    if (ipResponse.success) {\r\n      ip = ipResponse.data.query;\r\n    }\r\n\r\n    // new countdown id\r\n    let countdownId = '';\r\n    // get current countdown in progress\r\n    let countdownRes = await httpRequest(`${COUNTDOWNS}${CURRENT}`, 'GET');\r\n    if (countdownRes.success) {\r\n      countdownId = countdownRes.data._id;\r\n    }\r\n    // send request\r\n    let res = await httpRequest(`${REQUESTS}`, 'POST', {\r\n      user: userId,\r\n      text: this.state.request,\r\n      countdown: countdownId,\r\n      ip: ip\r\n    });\r\n    // set live countdown\r\n    this.setState({\r\n      liveCountdown: countdownId\r\n    });\r\n    if (res.success) {\r\n      NotificationManager.success('Your request has been successfully sent.');\r\n      this.setState({\r\n        showAlert: true\r\n      });\r\n    } else {\r\n      NotificationManager.error(res.data);\r\n    }\r\n  };\r\n\r\n  // fetch countdown settings\r\n  async fetchConfig() {\r\n    let res = await httpRequest(`${SETTINGS}${CONFIG}`, 'GET');\r\n    if (res.success) {\r\n      this.setState({\r\n        config: {\r\n          minUsers: res.data.minUsers,\r\n          requestLength: res.data.requestLength,\r\n          bans: res.data.bans.split(',')\r\n        }\r\n      });\r\n\r\n      this.showCaptcha = this.showCaptcha.bind(this);\r\n    }\r\n  }\r\n\r\n  // get reqeust text\r\n  getRequestText(e) {\r\n    // remove banning words\r\n    this.state.config.bans.forEach(element => {\r\n      // check forbidden word\r\n      if (e.target.value.indexOf(element) === -1) {\r\n        this.setState({\r\n          request: e.target.value\r\n        });\r\n      } else {\r\n        NotificationManager.error(`The word \"${element}\" is forbidden.`);\r\n        e.target.value = e.target.value.replaceAll(element, '');\r\n      }\r\n\r\n      // check request length\r\n      if (e.target.value.length > this.state.config.requestLength) {\r\n        NotificationManager.error(\r\n          `The max length of a request is ${this.state.config.requestLength}.`\r\n        );\r\n        e.target.value = e.target.value.slice(this.state.config.requestLength);\r\n      }\r\n    });\r\n  }\r\n\r\n  // show captcha dialog\r\n  showCaptcha() {\r\n    // no request inputed\r\n    if (this.state.request === '') {\r\n      NotificationManager.error('Please input your reqeust.');\r\n      return;\r\n    }\r\n    // check spam\r\n    var spamCheck = require('spam-check');\r\n    var options = { string: this.state.request, type: 'part' };\r\n    var self = this;\r\n    spamCheck(options, function(err, results) {\r\n      if (results.spam) {\r\n        NotificationManager.error('Your request is spam.');\r\n      } else {\r\n        self.setState({\r\n          dialogVisible: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { dialogVisible, showAlert, pendingText } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"w__100 mb-3\">\r\n          <div className=\"row rounded-xxl white-border form-group mb-0 icon-input\">\r\n            <i className=\"feather-message-circle font-sm text-grey-400 left-0\" />\r\n            <textarea\r\n              autoFocus\r\n              type=\"text\"\r\n              name=\"request\"\r\n              rows={7}\r\n              onChange={e => {\r\n                this.getRequestText(e);\r\n              }}\r\n              max={this.state.config.requestLength}\r\n              required\r\n              autoComplete=\"off\"\r\n              placeholder=\"Write your request here to join the countdown.\"\r\n              className=\"shadow-xss border-0 lh-32 pt-2 pb-2 ps-5 pe-3 font-xs fw-500 rounded-xxl full-width theme-dark-bg\"\r\n            />\r\n            <div className=\"btn-send-container text-right\">\r\n              <Link\r\n                to=\"#\"\r\n                onClick={this.showCaptcha}\r\n                className=\"p-2 text-center ms-0 menu-icon center-menu-icon\"\r\n              >\r\n                <ReplyIcon className=\"btn-send font-xxl bg-success btn-send-lg text-white theme-dark-bg\" />\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {showAlert ? (\r\n          <div className=\"row pb-3\">\r\n            <Alert\r\n              security=\"info\"\r\n              onClose={() => {\r\n                this.setState({\r\n                  showAlert: false\r\n                });\r\n              }}\r\n            >\r\n              {pendingText}\r\n            </Alert>\r\n          </div>\r\n        ) : (\r\n          ''\r\n        )}\r\n        <SubsribeDialog\r\n          visible={dialogVisible}\r\n          onClose={() => {\r\n            this.setState({\r\n              dialogVisible: false\r\n            });\r\n          }}\r\n          onSubmit={this.sendRequest}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(MessageBox);\r\n","export const START_COUNTDOWN = 'start_countdown';\r\nexport const END_COUNTDOW = 'end_countdown';\r\nexport const SWITCH_WINNER = 'switch_winner';\r\nexport const NEW_REQUEST = 'new_request';\r\nexport const PENDING_COUNTDOWN = 'pending_countdown';\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { NotificationManager } from 'react-notifications';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport io from 'socket.io-client';\r\nimport Header from '../../components/Header';\r\nimport Countdowns from '../../components/CountdownList';\r\nimport Requests from '../../components/Requests';\r\nimport LiveUsers from '../../components/LiveUsers';\r\nimport Users from '../../components/UserList';\r\nimport Winner from '../../components/Winner';\r\nimport Comments from '../../components/Comments';\r\nimport history from '../../helpers/history';\r\nimport setPendingStatusAction from './../../store/action/statusAction';\r\nimport setSimpleModeAction from './../../store/action/modeAction';\r\nimport { getUserId, httpRequest } from '../../helpers/HttpHandler';\r\nimport {\r\n  COMMENTS,\r\n  CONFIG,\r\n  COUNTDOWNS,\r\n  PARAM_COUNT,\r\n  PARAM_COUNTDOWN,\r\n  PARAM_TOP,\r\n  PARAM_WORST,\r\n  REQUESTS,\r\n  SEO,\r\n  SETTINGS,\r\n  SOCKET_SERVER_URL,\r\n  USERS\r\n} from '../../api/uri';\r\nimport { getIP } from '../../helpers/Country';\r\nimport {\r\n  END_COUNTDOW,\r\n  NEW_REQUEST,\r\n  START_COUNTDOWN,\r\n  SWITCH_WINNER\r\n} from '../../api/socket';\r\nimport CountdownWidget from './CountdownWidget';\r\nimport MessageBox from './MessageBox';\r\n\r\n// socket\r\nconst SOCKET = io(SOCKET_SERVER_URL);\r\n\r\nclass CountdownPanel extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // current countdown\r\n      countdown: {},\r\n      // current comments\r\n      comments: [],\r\n      // comment type\r\n      commentType: COUNTDOWNS,\r\n      // user ip and country\r\n      origin: {\r\n        ip: '127.0.0.1',\r\n        country: 'US'\r\n      },\r\n      // selected item id\r\n      selectedId: '',\r\n      // requests\r\n      worstRequests: [],\r\n      topRequests: [],\r\n      // top users\r\n      topUsers: [],\r\n      // live user requests\r\n      requests: [],\r\n      // top countdowns\r\n      topCountdowns: [],\r\n      // winner\r\n      winner: { _id: '', name: 'PENDING' },\r\n      // winner's request\r\n      winnerRequest: { _id: '', text: '' },\r\n      // countdown in progress\r\n      inProgress: false,\r\n      // current countdown time\r\n      currentTime: 0,\r\n      // simple mode view\r\n      simpleMode: true,\r\n      // pendint to start countdown\r\n      pendingStatus: true,\r\n      // countdown comments\r\n      countdownComments: [],\r\n      // request comments\r\n      requestComments: [],\r\n      // user comments\r\n      userComments: []\r\n    };\r\n\r\n    this.commentboxRef = React.createRef();\r\n    this.countdownRef = React.createRef();\r\n\r\n    // bind methods\r\n    this.saveComments = this.saveComments.bind(this);\r\n    this.connectSocket = this.connectSocket.bind(this);\r\n    this.fetchCurrentCountdown = this.fetchCurrentCountdown.bind(this);\r\n    this.fetchLiveUsers = this.fetchLiveUsers.bind(this);\r\n    this.fetchTopCountdowns = this.fetchTopCountdowns.bind(this);\r\n    this.fetchTopUsers = this.fetchTopUsers.bind(this);\r\n    this.fetchComments = this.fetchComments.bind(this);\r\n    this.refreshTopRequests = this.refreshTopRequests.bind(this);\r\n    this.refreshWorstRequests = this.refreshWorstRequests.bind(this);\r\n    this.newReqeustComment = this.newReqeustComment.bind(this);\r\n    this.newUserComment = this.newUserComment.bind(this);\r\n    this.newCountdownComment = this.newCountdownComment.bind(this);\r\n    this.updateWinnerComments = this.updateWinnerComments.bind(this);\r\n    this.updateCountdownComments = this.updateCountdownComments.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.isSimpleMode !== this.props.isSimpleMode) {\r\n      this.setState({\r\n        simpleMode: this.props.isSimpleMode\r\n      });\r\n      // fetch live users\r\n      this.fetchTopUsers();\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // conect socket server\r\n    this.connectSocket();\r\n\r\n    // get ip and country\r\n    this.setUserIPAndCountry();\r\n\r\n    // set seo\r\n    this.setSEO();\r\n\r\n    // fetch top/worst requests\r\n    this.setState({\r\n      worstRequests: await this.fetchReqeusts(PARAM_WORST),\r\n      topRequests: await this.fetchReqeusts(PARAM_TOP)\r\n    });\r\n\r\n    // fetch live users\r\n    this.fetchTopUsers();\r\n\r\n    // get top countdowns\r\n    this.fetchTopCountdowns();\r\n\r\n    // fetch current countdonw\r\n    this.fetchCurrentCountdown(this.props.match.params.id);\r\n\r\n    history.listen((location, action) => {\r\n      let pathArray = location.pathname.split('/');\r\n      let id = pathArray[pathArray.length - 1];\r\n      if (pathArray[pathArray.length - 2] === 'countdown') {\r\n        // fetch current countdonw\r\n        this.fetchCurrentCountdown(id);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * socket event handler\r\n   */\r\n  connectSocket() {\r\n    const self = this;\r\n    // start countdown\r\n    SOCKET.on(START_COUNTDOWN, async function() {\r\n      self.setState({\r\n        pendingStatus: false,\r\n        inProgress: true\r\n      });\r\n      self.props.setPendingStatus(false);\r\n    });\r\n    // new request\r\n    SOCKET.on(NEW_REQUEST, async function() {\r\n      self.countdownRef.current.scrollIntoView({\r\n        behavior: 'smooth'\r\n      });\r\n      self.fetchLiveUsers();\r\n    });\r\n\r\n    // switch winner\r\n    SOCKET.on(SWITCH_WINNER, function(payload) {\r\n      if (self.props.match.params.id === payload.request.countdown) {\r\n        self.setState({\r\n          winner: payload.user,\r\n          winnerRequest: payload.request,\r\n          currentTime: payload.time,\r\n          inProgress: true,\r\n          pendingStatus: false\r\n        });\r\n        self.props.setPendingStatus(false);\r\n      }\r\n    });\r\n\r\n    // end countdown\r\n    SOCKET.on(END_COUNTDOW, function(payload) {\r\n      if (self.props.match.params.id === payload.request.countdown) {\r\n        self.setState({\r\n          winner: payload.user,\r\n          winnerRequest: payload.request,\r\n          currentTime: payload.time,\r\n          inProgress: false\r\n        });\r\n\r\n        // refresh countdown\r\n        self.fetchCurrentCountdown(self.props.match.params.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * get/set user's IP and country name\r\n   */\r\n  async setUserIPAndCountry() {\r\n    let ipResponse = await getIP();\r\n    if (ipResponse.success) {\r\n      this.setState({\r\n        origin: {\r\n          ip: ipResponse.data.query,\r\n          country: ipResponse.data.country\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get and set min user count to start countdown\r\n   * and countdown period\r\n   */\r\n  async setConfiguration() {\r\n    let configRes = await httpRequest(`${SETTINGS}${CONFIG}`, 'GET');\r\n    if (configRes.success) {\r\n      this.setState({\r\n        winnerRequest: {\r\n          text: `The countdown will get started when the number of live users reaches ${\r\n            configRes.data.minUsers\r\n          } and more.`\r\n        },\r\n        currentTime: configRes.data.duration * 60\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * fetch seo contents and set to page\r\n   */\r\n  async setSEO() {\r\n    let res = await httpRequest(`${SETTINGS}${SEO}`, 'GET');\r\n    if (res.success) {\r\n      document.getElementsByTagName('title')[0].innerHTML = res.data.title;\r\n      document.getElementsByName('keywords')[0].content = res.data.keywords;\r\n      document.getElementsByName('description')[0].content =\r\n        res.data.description;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * fetch current countdown\r\n   */\r\n  async fetchCurrentCountdown(id) {\r\n    // current countdown\r\n    let countdownRes = await httpRequest(`${COUNTDOWNS}/${id}`, 'GET');\r\n    if (countdownRes.success) {\r\n      // set id to fetch comments\r\n      this.setState({\r\n        selectedId: countdownRes.data._id,\r\n        commentType: COUNTDOWNS\r\n      });\r\n\r\n      let countdown = countdownRes.data;\r\n      countdown = {\r\n        ...countdown,\r\n        comments: (await httpRequest(\r\n          `${COUNTDOWNS}/${countdown._id}${COMMENTS}?${PARAM_COUNT}`,\r\n          'GET'\r\n        )).data\r\n      };\r\n\r\n      this.setState({\r\n        countdown: countdown\r\n      });\r\n\r\n      // fetch comments\r\n      this.fetchComments();\r\n\r\n      if (typeof countdownRes.data.winner === 'undefined') {\r\n        // set configuration for countdown\r\n        this.setConfiguration();\r\n        this.setState({\r\n          pendingStatus: true,\r\n          inProgress: false\r\n        });\r\n        this.props.setPendingStatus(true);\r\n      } else {\r\n        this.setState({\r\n          currentTime: 0\r\n        });\r\n        // get winner and winner's request\r\n        let winnerRes = await httpRequest(\r\n          `${USERS}/${countdownRes.data.winner}`,\r\n          'GET'\r\n        );\r\n        // completed countdown\r\n        if (winnerRes.success) {\r\n          let winner = winnerRes.data;\r\n          winner = {\r\n            ...winner,\r\n            comments: (await httpRequest(\r\n              `${USERS}/${winnerRes.data._id}${COMMENTS}?${PARAM_COUNT}`,\r\n              'GET'\r\n            )).data\r\n          };\r\n          let winnerRequestRes = await httpRequest(\r\n            `${REQUESTS}/${countdownRes.data.request}`,\r\n            'GET'\r\n          );\r\n          let winnerRequest = {\r\n            text: ''\r\n          };\r\n          if (winnerRequestRes.success) {\r\n            winnerRequest = winnerRequestRes.data;\r\n            winnerRequest = {\r\n              ...winnerRequest,\r\n              comments: (await httpRequest(\r\n                `${REQUESTS}/${\r\n                  winnerRequestRes.data._id\r\n                }${COMMENTS}?${PARAM_COUNT}`,\r\n                'GET'\r\n              )).data\r\n            };\r\n          }\r\n          this.setState({\r\n            winnerRequest: winnerRequest,\r\n            winner: winner,\r\n            inProgress: false,\r\n            pendingStatus: false\r\n          });\r\n          this.props.setPendingStatus(false);\r\n        }\r\n      }\r\n      // fetch live users\r\n      this.fetchLiveUsers();\r\n    } else {\r\n      // can not find the countdown\r\n      history.push('/404');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * fetch top countdowns from api\r\n   */\r\n  async fetchTopCountdowns() {\r\n    let res = await httpRequest(`${COUNTDOWNS}?${PARAM_TOP}`, 'GET');\r\n    if (res.success) {\r\n      let resArray = [];\r\n      for (let i = 0; i < res.data.length; i++) {\r\n        let countdown = {\r\n          ...res.data[i],\r\n          comments: await this.getTotalCommentsCount(res.data[i]._id)\r\n        };\r\n        resArray.push(countdown);\r\n      }\r\n      this.setState({\r\n        topCountdowns: resArray\r\n      });\r\n    }\r\n  }\r\n\r\n  async getTotalCommentsCount(countdownId) {\r\n    // countdown comment\r\n    let res = await httpRequest(\r\n      `${COUNTDOWNS}/${countdownId}${COMMENTS}`,\r\n      'GET'\r\n    );\r\n    let comments = 0;\r\n    if (res.success) {\r\n      comments += Number(res.data.length);\r\n    }\r\n\r\n    // user comment\r\n    let requestRes = await httpRequest(\r\n      `${REQUESTS}?${PARAM_COUNTDOWN}=${countdownId}`,\r\n      'GET'\r\n    );\r\n    if (requestRes.success) {\r\n      for (let i = 0; i < requestRes.data.length; i++) {\r\n        let res = await httpRequest(\r\n          `${USERS}/${requestRes.data[i].user}${COMMENTS}`,\r\n          'GET'\r\n        );\r\n        if (res.success) {\r\n          comments += res.data.length;\r\n        }\r\n      }\r\n    }\r\n\r\n    // request countdonw\r\n    requestRes = await httpRequest(\r\n      `${REQUESTS}?${PARAM_COUNTDOWN}=${countdownId}`,\r\n      'GET'\r\n    );\r\n    if (requestRes.success) {\r\n      for (let i = 0; i < requestRes.data.length; i++) {\r\n        let res = await httpRequest(\r\n          `${REQUESTS}/${requestRes.data[i]._id}${COMMENTS}`,\r\n          'GET'\r\n        );\r\n        if (res.success) {\r\n          comments += res.data.length;\r\n        }\r\n      }\r\n    }\r\n\r\n    return comments;\r\n  }\r\n\r\n  /**\r\n   * fetch top users from api\r\n   */\r\n  async fetchTopUsers() {\r\n    let res = await httpRequest(`${USERS}?${PARAM_TOP}`, 'GET');\r\n    if (res.success) {\r\n      let resArray = [];\r\n      for (let i = 0; i < res.data.length; i++) {\r\n        let user = {\r\n          ...res.data[i],\r\n          comments: (await httpRequest(\r\n            `${USERS}/${res.data[i]._id}${COMMENTS}?${PARAM_COUNT}`,\r\n            'GET'\r\n          )).data\r\n        };\r\n        resArray.push(user);\r\n      }\r\n      this.setState({\r\n        topUsers: resArray\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * fetch live users and reqeusts from api\r\n   */\r\n  async fetchLiveUsers() {\r\n    let res = await httpRequest(\r\n      `${REQUESTS}?countdown=${this.state.countdown._id}`,\r\n      'GET'\r\n    );\r\n    if (res.success) {\r\n      let reqeustArray = [];\r\n      for (let i = 0; i < res.data.length; i++) {\r\n        // user comments\r\n        let userRes = await httpRequest(`${USERS}/${res.data[i].user}`, 'GET');\r\n        if (userRes.success) {\r\n          let user = {\r\n            ...userRes.data,\r\n            comments: (await httpRequest(\r\n              `${USERS}/${userRes.data._id}${COMMENTS}?${PARAM_COUNT}`,\r\n              'GET'\r\n            )).data\r\n          };\r\n          // request comments\r\n          let request = {\r\n            ...res.data[i],\r\n            user: user,\r\n            comments: (await httpRequest(\r\n              `${REQUESTS}/${res.data[i]._id}${COMMENTS}?${PARAM_COUNT}`,\r\n              'GET'\r\n            )).data\r\n          };\r\n          reqeustArray.push(request);\r\n        }\r\n      }\r\n      this.setState({\r\n        requests: reqeustArray\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * fetch comments\r\n   */\r\n  fetchComments() {\r\n    this.fetchUserComments();\r\n    this.fetchCountdownComments();\r\n    this.fetchRequestComments();\r\n  }\r\n\r\n  /**\r\n   * Save comment\r\n   * @param {Object} comment\r\n   */\r\n  async saveComments(comment) {\r\n    let res = {};\r\n    // user id\r\n    let id = await getUserId();\r\n\r\n    // save comment\r\n    if (comment.category) {\r\n      this.setState({\r\n        commentType: comment.category\r\n      });\r\n    }\r\n    if (comment.id) {\r\n      this.setState({\r\n        selectedId: comment.id\r\n      });\r\n    }\r\n\r\n    switch (this.state.commentType) {\r\n      case COUNTDOWNS:\r\n        res = await httpRequest(\r\n          `${COUNTDOWNS}/${this.state.selectedId}${COMMENTS}`,\r\n          'POST',\r\n          {\r\n            user: id,\r\n            countdown: this.state.selectedId,\r\n            text: comment.message,\r\n            parentId: comment.parentId\r\n          }\r\n        );\r\n        this.updateCountdownComments();\r\n        this.fetchTopCountdowns();\r\n        break;\r\n      case REQUESTS:\r\n        res = await httpRequest(\r\n          `${REQUESTS}/${this.state.selectedId}${COMMENTS}`,\r\n          'POST',\r\n          {\r\n            user: id,\r\n            request: this.state.selectedId,\r\n            text: comment.message,\r\n            parentId: comment.parentId\r\n          }\r\n        );\r\n        this.updateWinnerComments();\r\n        this.setState({\r\n          worstRequests: await this.fetchReqeusts(PARAM_WORST),\r\n          topRequests: await this.fetchReqeusts(PARAM_TOP)\r\n        });\r\n        break;\r\n      case USERS:\r\n        res = await httpRequest(\r\n          `${USERS}/${this.state.selectedId}${COMMENTS}`,\r\n          'POST',\r\n          {\r\n            user: id,\r\n            winner: this.state.selectedId,\r\n            text: comment.message,\r\n            parentId: comment.parentId\r\n          }\r\n        );\r\n        this.updateWinnerComments();\r\n        this.fetchLiveUsers();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (res.success) {\r\n      NotificationManager.success('Your comment has been sent successfully!');\r\n      this.fetchComments();\r\n    } else {\r\n      NotificationManager.error(res.data.toString());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * jump to request comments\r\n   * @param {String} id\r\n   */\r\n  async newReqeustComment(id) {\r\n    this.commentboxRef.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n      block: 'start'\r\n    });\r\n    // set id to fetch comments\r\n    await this.setState({\r\n      selectedId: id,\r\n      commentType: REQUESTS\r\n    });\r\n    await this.fetchComments();\r\n  }\r\n\r\n  /**\r\n   * jump to countdown comments\r\n   * @param {String} id\r\n   */\r\n  async newCountdownComment(id) {\r\n    this.commentboxRef.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n      block: 'start'\r\n    });\r\n    // set id to fetch comments\r\n    await this.setState({\r\n      selectedId: id,\r\n      commentType: COUNTDOWNS\r\n    });\r\n    this.fetchComments();\r\n  }\r\n\r\n  /**\r\n   * jump to user comments\r\n   * @param {String} id\r\n   */\r\n  async newUserComment(id) {\r\n    this.commentboxRef.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n      block: 'start'\r\n    });\r\n    // set id to fetch comments\r\n    await this.setState({\r\n      selectedId: id,\r\n      commentType: USERS\r\n    });\r\n    await this.fetchComments();\r\n  }\r\n\r\n  /**\r\n   * update winner comments count\r\n   */\r\n  async updateWinnerComments() {\r\n    let winner = this.state.winner;\r\n    winner = {\r\n      ...winner,\r\n      comments: (await httpRequest(\r\n        `${USERS}/${winner._id}${COMMENTS}?${PARAM_COUNT}`,\r\n        'GET'\r\n      )).data\r\n    };\r\n    let winnerRequest = this.state.winnerRequest;\r\n    winnerRequest = {\r\n      ...this.state.winnerRequest,\r\n      comments: (await httpRequest(\r\n        `${REQUESTS}/${winnerRequest._id}${COMMENTS}?${PARAM_COUNT}`,\r\n        'GET'\r\n      )).data\r\n    };\r\n    this.setState({\r\n      winnerRequest: winnerRequest,\r\n      winner: winner\r\n    });\r\n  }\r\n\r\n  /**\r\n   * update countdown comment count\r\n   */\r\n  async updateCountdownComments() {\r\n    let commentsRes = await httpRequest(\r\n      `${COUNTDOWNS}/${this.state.countdown._id}${COMMENTS}?${PARAM_COUNT}`,\r\n      'GET'\r\n    );\r\n    if (commentsRes.success) {\r\n      let countdown = this.state.countdown;\r\n      countdown = {\r\n        ...countdown,\r\n        comments: commentsRes.data\r\n      };\r\n      this.setState({\r\n        countdown: countdown\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * fetch 5 requests\r\n   */\r\n  async fetchReqeusts(param) {\r\n    let worstRes = await httpRequest(`${REQUESTS}?${param}`, 'GET');\r\n    let requests = [];\r\n    if (worstRes.success) {\r\n      for (let i = 0; i < worstRes.data.length; i++) {\r\n        let request = worstRes.data[i];\r\n        let userRes = await httpRequest(\r\n          `${USERS}/${worstRes.data[i].user}`,\r\n          'GET'\r\n        );\r\n        let commentRes = await httpRequest(\r\n          `${REQUESTS}/${worstRes.data[i]._id}${COMMENTS}?${PARAM_COUNT}`,\r\n          'GET'\r\n        );\r\n        if (userRes.success && commentRes.success) {\r\n          request.user = userRes.data;\r\n          request.comments = commentRes.data;\r\n        }\r\n        requests.push(request);\r\n      }\r\n    }\r\n    return requests;\r\n  }\r\n\r\n  /**\r\n   * refresh top request\r\n   */\r\n  async refreshTopRequests() {\r\n    this.setState({\r\n      topRequests: await this.fetchReqeusts(PARAM_TOP)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * refresh worst request\r\n   */\r\n  async refreshWorstRequests() {\r\n    this.setState({\r\n      worstRequests: await this.fetchReqeusts(PARAM_WORST)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * sort comments with reply\r\n   * @param {Array} comments\r\n   */\r\n  sortComments(comments) {\r\n    let rec = (comment, threads) => {\r\n      threads.forEach(element => {\r\n        let value = element;\r\n        if (typeof value.reply === 'undefined') {\r\n          value.reply = [];\r\n        }\r\n\r\n        if (value._id === comment.parentId) {\r\n          value.reply.push(comment);\r\n          return;\r\n        }\r\n\r\n        if (value.reply.length > 0) {\r\n          rec(comment, value.reply);\r\n        }\r\n      });\r\n    };\r\n\r\n    let threads = [],\r\n      comment;\r\n    for (let i = 0; i < comments.length; i++) {\r\n      comment = comments[i];\r\n      comment['reply'] = [];\r\n      let parentId = comment.parentId;\r\n      if (!parentId) {\r\n        threads.push(comment);\r\n        threads.sort(function(a, b) {\r\n          return b.likes - a.likes;\r\n        });\r\n        continue;\r\n      }\r\n      rec(comment, threads);\r\n    }\r\n    return threads;\r\n  }\r\n\r\n  /**\r\n   * fetch countdown comments\r\n   */\r\n  async fetchCountdownComments() {\r\n    let res = await httpRequest(\r\n      `${COUNTDOWNS}/${this.state.countdown._id}${COMMENTS}`,\r\n      'GET'\r\n    );\r\n    let comments = [];\r\n    if (res.success && res.data.length > 0) {\r\n      let commentsItem = [];\r\n      for (let j = 0; j < res.data.length; j++) {\r\n        let comment = res.data[j];\r\n        let userRes = await httpRequest(`${USERS}/${res.data[j].user}`, 'GET');\r\n        if (userRes.success) {\r\n          comment.user = userRes.data;\r\n        }\r\n        commentsItem.push(comment);\r\n      }\r\n      comments.push({\r\n        countdown: this.state.countdown,\r\n        comments: this.sortComments(commentsItem)\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      countdownComments: comments\r\n    });\r\n    this.setState({\r\n      countdownComments: comments\r\n    });\r\n  }\r\n\r\n  /**\r\n   * fetch request comments\r\n   */\r\n  async fetchRequestComments() {\r\n    let requestRes = await httpRequest(\r\n      `${REQUESTS}?${PARAM_COUNTDOWN}=${this.state.countdown._id}`,\r\n      'GET'\r\n    );\r\n    let comments = [];\r\n    if (requestRes.success) {\r\n      for (let i = 0; i < requestRes.data.length; i++) {\r\n        let res = await httpRequest(\r\n          `${REQUESTS}/${requestRes.data[i]._id}${COMMENTS}`,\r\n          'GET'\r\n        );\r\n        if (res.success && res.data.length > 0) {\r\n          let commentsItem = [];\r\n          for (let j = 0; j < res.data.length; j++) {\r\n            let comment = res.data[j];\r\n            let userRes = await httpRequest(\r\n              `${USERS}/${res.data[j].user}`,\r\n              'GET'\r\n            );\r\n            if (userRes.success) {\r\n              comment.user = userRes.data;\r\n            }\r\n            commentsItem.push(comment);\r\n          }\r\n          let requestUserRes = await httpRequest(\r\n            `${USERS}/${requestRes.data[i].user}`,\r\n            'GET'\r\n          );\r\n          let request = requestRes.data[i];\r\n          if (requestUserRes.success) {\r\n            request.user = requestUserRes.data;\r\n          }\r\n          comments.push({\r\n            request: request,\r\n            comments: this.sortComments(commentsItem)\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      requestComments: comments\r\n    });\r\n    this.setState({\r\n      requestComments: comments\r\n    });\r\n  }\r\n\r\n  /**\r\n   * fetch user comments\r\n   */\r\n  async fetchUserComments() {\r\n    let requestRes = await httpRequest(\r\n      `${REQUESTS}?${PARAM_COUNTDOWN}=${this.state.countdown._id}`,\r\n      'GET'\r\n    );\r\n    let comments = [];\r\n    if (requestRes.success) {\r\n      for (let i = 0; i < requestRes.data.length; i++) {\r\n        let res = await httpRequest(\r\n          `${USERS}/${requestRes.data[i].user}${COMMENTS}`,\r\n          'GET'\r\n        );\r\n        if (res.success && res.data.length > 0) {\r\n          let commentsItem = [];\r\n          for (let j = 0; j < res.data.length; j++) {\r\n            let comment = res.data[j];\r\n            let userRes = await httpRequest(\r\n              `${USERS}/${res.data[j].user}`,\r\n              'GET'\r\n            );\r\n            if (userRes.success) {\r\n              comment.user = userRes.data;\r\n            }\r\n            commentsItem.push(comment);\r\n          }\r\n          let requestUserRes = await httpRequest(\r\n            `${USERS}/${requestRes.data[i].user}`,\r\n            'GET'\r\n          );\r\n          if (requestUserRes.success) {\r\n            comments.push({\r\n              user: requestUserRes.data,\r\n              comments: this.sortComments(commentsItem)\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      userComments: comments\r\n    });\r\n    this.setState({\r\n      userComments: comments\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      requests,\r\n      countdown,\r\n      countdownComments,\r\n      userComments,\r\n      requestComments,\r\n      worstRequests,\r\n      topRequests,\r\n      topUsers,\r\n      topCountdowns,\r\n      winner,\r\n      winnerRequest,\r\n      inProgress,\r\n      currentTime,\r\n      simpleMode,\r\n      pendingStatus\r\n    } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <Row className=\"main-panel p-4\">\r\n          {simpleMode ? (\r\n            ''\r\n          ) : (\r\n            <Col md=\"3\" sm=\"12\" className=\"scroll-bar p-3\">\r\n              <Countdowns\r\n                title=\"Top Countdowns\"\r\n                countdowns={topCountdowns}\r\n                onUpdated={this.fetchTopCountdowns}\r\n              />\r\n              <Requests\r\n                title=\"Top Requests\"\r\n                requests={topRequests}\r\n                onUpdated={this.refreshTopRequests}\r\n              />\r\n              <Users\r\n                users={topUsers}\r\n                title=\"Top Users\"\r\n                onUpdated={this.fetchTopUsers}\r\n              />\r\n            </Col>\r\n          )}\r\n\r\n          <Col\r\n            md={simpleMode ? 10 : 6}\r\n            sm={12}\r\n            className={simpleMode ? 'm-auto' : ''}\r\n          >\r\n            <Row className=\"justify-content-center pt-3\">\r\n              <Col lg={12} md={12} xs={12}>\r\n                <MessageBox />\r\n              </Col>\r\n              <Col lg={12} md={12} xs={12} className=\"text-center\">\r\n                <div ref={this.countdownRef}>\r\n                  {/* countdown */}\r\n                  <CountdownWidget\r\n                    countdown={countdown}\r\n                    currentTime={currentTime}\r\n                    requests={requests}\r\n                    pending={pendingStatus}\r\n                    onUpdated={this.fetchCurrentCountdown}\r\n                    onNewComment={this.newCountdownComment}\r\n                  />\r\n                </div>\r\n\r\n                {/* Possible winner */}\r\n                {pendingStatus ? (\r\n                  ''\r\n                ) : (\r\n                  <Row className=\"shadow-xss rounded-xxl card p-4 mt-3\">\r\n                    <Col md={12}>\r\n                      <h4\r\n                        className={\r\n                          this.state.inProgress\r\n                            ? 'text-success mb-0 ft-25 fw-600'\r\n                            : 'text-success mb-0 ft-55 fw-600'\r\n                        }\r\n                      >\r\n                        {this.state.inProgress ? 'Possible Winner' : 'Winner'}\r\n                      </h4>\r\n                      <Winner\r\n                        user={winner}\r\n                        isDone={!inProgress}\r\n                        request={winnerRequest}\r\n                        onNewRequestComment={this.newReqeustComment}\r\n                        onNewUserComment={this.newUserComment}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                )}\r\n\r\n                {/* Comments */}\r\n                <Row className=\"shadow-xss rounded-xxl card mt-3\">\r\n                  <Col md={12}>\r\n                    <div ref={this.commentboxRef}>\r\n                      <Comments\r\n                        id={countdown._id}\r\n                        countdownComments={countdownComments}\r\n                        userComments={userComments}\r\n                        requestComments={requestComments}\r\n                        requests={requests}\r\n                        winner={winner}\r\n                        winnerRequest={winnerRequest}\r\n                        onSave={this.saveComments}\r\n                        onUpdated={this.fetchComments}\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n\r\n          {simpleMode ? (\r\n            ''\r\n          ) : (\r\n            <Col md=\"3\" sm=\"12\" className=\"p-3\">\r\n              <LiveUsers\r\n                requests={requests}\r\n                title={'Live Users'}\r\n                onUpdated={this.fetchLiveUsers}\r\n                onNewComment={this.newUserComment}\r\n              />\r\n              <Requests\r\n                title=\"Worst Requests\"\r\n                requests={worstRequests}\r\n                onUpdated={this.refreshWorstRequests}\r\n              />\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state,\r\n  isPending: state.getIn(['statusReducer', 'pending']),\r\n  isSimpleMode: state.getIn(['modeReducer', 'simpleMode'])\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setPendingStatus: bindActionCreators(setPendingStatusAction, dispatch),\r\n  setSimpleMode: bindActionCreators(setSimpleModeAction, dispatch)\r\n});\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(CountdownPanel)\r\n);\r\n"],"sourceRoot":""}